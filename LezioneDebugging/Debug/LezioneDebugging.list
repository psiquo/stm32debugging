
LezioneDebugging.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002934  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a88  08002a88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a90  08002a90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a90  08002a90  00012a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08002b08  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002b08  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085ba  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a9  00000000  00000000  00028652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  00029c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000128fe  00000000  00000000  0002a968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b75  00000000  00000000  0003d266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075759  00000000  00000000  00045ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019cc  00000000  00000000  000bb584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029dc 	.word	0x080029dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080029dc 	.word	0x080029dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <add>:
	unsigned int unsigned_value;
	float float_value;
	char *string;
} simple_struct;

void add(int *base, int value){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
	*base += value;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	18d2      	adds	r2, r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	601a      	str	r2, [r3, #0]
}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}

080004c6 <example_break>:

void example_break() {
 80004c6:	b580      	push	{r7, lr}
 80004c8:	b082      	sub	sp, #8
 80004ca:	af00      	add	r7, sp, #0
	int sum = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	603b      	str	r3, [r7, #0]

	add(&sum,3);
 80004d0:	003b      	movs	r3, r7
 80004d2:	2103      	movs	r1, #3
 80004d4:	0018      	movs	r0, r3
 80004d6:	f7ff ffe7 	bl	80004a8 <add>

	for(int i = 0; i < 100; i++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	e008      	b.n	80004f2 <example_break+0x2c>
		add(&sum,i);
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	003b      	movs	r3, r7
 80004e4:	0011      	movs	r1, r2
 80004e6:	0018      	movs	r0, r3
 80004e8:	f7ff ffde 	bl	80004a8 <add>
	for(int i = 0; i < 100; i++) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2b63      	cmp	r3, #99	; 0x63
 80004f6:	ddf3      	ble.n	80004e0 <example_break+0x1a>
	}

	sum = 1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	603b      	str	r3, [r7, #0]
	while(sum <= 315){
 80004fc:	e00a      	b.n	8000514 <example_break+0x4e>
		add(&sum, sum / 2 + 1);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <example_break+0x40>
 8000504:	3301      	adds	r3, #1
 8000506:	105b      	asrs	r3, r3, #1
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	003b      	movs	r3, r7
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff ffca 	bl	80004a8 <add>
	while(sum <= 315){
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	239e      	movs	r3, #158	; 0x9e
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	429a      	cmp	r2, r3
 800051c:	dbef      	blt.n	80004fe <example_break+0x38>
	}

	return;
 800051e:	46c0      	nop			; (mov r8, r8)
}
 8000520:	46bd      	mov	sp, r7
 8000522:	b002      	add	sp, #8
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <example_watchpoint>:

void example_watchpoint(){
 8000528:	b580      	push	{r7, lr}
 800052a:	b0e6      	sub	sp, #408	; 0x198
 800052c:	af00      	add	r7, sp, #0
	int a[100];

	for(int i = 0; i <= 100; i++)
 800052e:	2300      	movs	r3, #0
 8000530:	22ca      	movs	r2, #202	; 0xca
 8000532:	0052      	lsls	r2, r2, #1
 8000534:	18ba      	adds	r2, r7, r2
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	e013      	b.n	8000562 <example_watchpoint+0x3a>
		a[i] = i;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <example_watchpoint+0x50>)
 800053c:	22cc      	movs	r2, #204	; 0xcc
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	189b      	adds	r3, r3, r2
 8000542:	19db      	adds	r3, r3, r7
 8000544:	21ca      	movs	r1, #202	; 0xca
 8000546:	0049      	lsls	r1, r1, #1
 8000548:	187a      	adds	r2, r7, r1
 800054a:	6812      	ldr	r2, [r2, #0]
 800054c:	0092      	lsls	r2, r2, #2
 800054e:	0008      	movs	r0, r1
 8000550:	1879      	adds	r1, r7, r1
 8000552:	6809      	ldr	r1, [r1, #0]
 8000554:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i <= 100; i++)
 8000556:	0002      	movs	r2, r0
 8000558:	18bb      	adds	r3, r7, r2
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	18ba      	adds	r2, r7, r2
 8000560:	6013      	str	r3, [r2, #0]
 8000562:	23ca      	movs	r3, #202	; 0xca
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	18fb      	adds	r3, r7, r3
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b64      	cmp	r3, #100	; 0x64
 800056c:	dde5      	ble.n	800053a <example_watchpoint+0x12>

	return;
 800056e:	46c0      	nop			; (mov r8, r8)
}
 8000570:	46bd      	mov	sp, r7
 8000572:	b066      	add	sp, #408	; 0x198
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	fffffe6c 	.word	0xfffffe6c

0800057c <example_variables>:

void example_variables(){
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b089      	sub	sp, #36	; 0x24
 8000580:	af00      	add	r7, sp, #0
	int a = 3;
 8000582:	2303      	movs	r3, #3
 8000584:	61fb      	str	r3, [r7, #28]

	a *= 5;
 8000586:	69fa      	ldr	r2, [r7, #28]
 8000588:	0013      	movs	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	189b      	adds	r3, r3, r2
 800058e:	61fb      	str	r3, [r7, #28]

	int b[5] = {5,4,3,2,1};
 8000590:	003b      	movs	r3, r7
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <example_variables+0x50>)
 8000594:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000596:	c313      	stmia	r3!, {r0, r1, r4}
 8000598:	ca03      	ldmia	r2!, {r0, r1}
 800059a:	c303      	stmia	r3!, {r0, r1}

	b[3] = 2;
 800059c:	003b      	movs	r3, r7
 800059e:	2202      	movs	r2, #2
 80005a0:	60da      	str	r2, [r3, #12]

	int *c = b;
 80005a2:	003b      	movs	r3, r7
 80005a4:	61bb      	str	r3, [r7, #24]

	char *string = malloc(10);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f002 f94a 	bl	8002840 <malloc>
 80005ac:	0003      	movs	r3, r0
 80005ae:	617b      	str	r3, [r7, #20]

	memset(string,'C',10);
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	220a      	movs	r2, #10
 80005b4:	2143      	movs	r1, #67	; 0x43
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 f94c 	bl	8002854 <memset>

	string[9] = 0;
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	3309      	adds	r3, #9
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]

	return;
 80005c4:	46c0      	nop			; (mov r8, r8)
}
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b009      	add	sp, #36	; 0x24
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	080029f4 	.word	0x080029f4

080005d0 <example_expressions>:

void example_expressions(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	int x = 5, y = x;
 80005d6:	2305      	movs	r3, #5
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	603b      	str	r3, [r7, #0]

	x += 1;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3301      	adds	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
	y += 1;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	603b      	str	r3, [r7, #0]

	x *= y;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	4353      	muls	r3, r2
 80005f0:	607b      	str	r3, [r7, #4]

	return;
 80005f2:	46c0      	nop			; (mov r8, r8)

}
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b002      	add	sp, #8
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <example_memory>:

void example_memory(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	simple_struct *sstr = malloc(sizeof(simple_struct));
 8000602:	2010      	movs	r0, #16
 8000604:	f002 f91c 	bl	8002840 <malloc>
 8000608:	0003      	movs	r3, r0
 800060a:	607b      	str	r3, [r7, #4]

	sstr -> int_value = 0;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
	sstr -> float_value = 3.5;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a15      	ldr	r2, [pc, #84]	; (800066c <example_memory+0x70>)
 8000616:	609a      	str	r2, [r3, #8]
	sstr -> unsigned_value = -1;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2201      	movs	r2, #1
 800061c:	4252      	negs	r2, r2
 800061e:	605a      	str	r2, [r3, #4]
	sstr -> string = malloc(10);
 8000620:	200a      	movs	r0, #10
 8000622:	f002 f90d 	bl	8002840 <malloc>
 8000626:	0003      	movs	r3, r0
 8000628:	001a      	movs	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	60da      	str	r2, [r3, #12]

	memset(sstr -> string,'B',10);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	220a      	movs	r2, #10
 8000634:	2142      	movs	r1, #66	; 0x42
 8000636:	0018      	movs	r0, r3
 8000638:	f002 f90c 	bl	8002854 <memset>

	sstr -> string[9] = 0;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	3309      	adds	r3, #9
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]

	sstr -> float_value = 4.3;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a09      	ldr	r2, [pc, #36]	; (8000670 <example_memory+0x74>)
 800064a:	609a      	str	r2, [r3, #8]
	sstr -> int_value = 5;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2205      	movs	r2, #5
 8000650:	601a      	str	r2, [r3, #0]
	sstr -> unsigned_value = !(sstr -> unsigned_value);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	425a      	negs	r2, r3
 8000658:	4153      	adcs	r3, r2
 800065a:	b2db      	uxtb	r3, r3
 800065c:	001a      	movs	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	605a      	str	r2, [r3, #4]
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	40600000 	.word	0x40600000
 8000670:	4089999a 	.word	0x4089999a

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b089      	sub	sp, #36	; 0x24
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fa01 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f823 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f000 f8bd 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000686:	f000 f88b 	bl	80007a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int simple_variable = 3;
 800068a:	2303      	movs	r3, #3
 800068c:	61fb      	str	r3, [r7, #28]
  int simple_array[5] = {1,2,3,4,5};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <main+0x50>)
 8000692:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000694:	c313      	stmia	r3!, {r0, r1, r4}
 8000696:	ca03      	ldmia	r2!, {r0, r1}
 8000698:	c303      	stmia	r3!, {r0, r1}
  int *simple_pointer = &simple_array;
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	61bb      	str	r3, [r7, #24]

  simple_variable = 4;
 800069e:	2304      	movs	r3, #4
 80006a0:	61fb      	str	r3, [r7, #28]

  example_break();
 80006a2:	f7ff ff10 	bl	80004c6 <example_break>
  example_variables();
 80006a6:	f7ff ff69 	bl	800057c <example_variables>
  example_watchpoint();
 80006aa:	f7ff ff3d 	bl	8000528 <example_watchpoint>
  example_expressions();
 80006ae:	f7ff ff8f 	bl	80005d0 <example_expressions>
  example_memory();
 80006b2:	f7ff ffa3 	bl	80005fc <example_memory>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006b6:	23a0      	movs	r3, #160	; 0xa0
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2120      	movs	r1, #32
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fc96 	bl	8000fee <HAL_GPIO_TogglePin>
 80006c2:	e7f8      	b.n	80006b6 <main+0x42>
 80006c4:	08002a08 	.word	0x08002a08

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b09d      	sub	sp, #116	; 0x74
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	2438      	movs	r4, #56	; 0x38
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	0018      	movs	r0, r3
 80006d4:	2338      	movs	r3, #56	; 0x38
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f002 f8bb 	bl	8002854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006de:	2324      	movs	r3, #36	; 0x24
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	0018      	movs	r0, r3
 80006e4:	2314      	movs	r3, #20
 80006e6:	001a      	movs	r2, r3
 80006e8:	2100      	movs	r1, #0
 80006ea:	f002 f8b3 	bl	8002854 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ee:	003b      	movs	r3, r7
 80006f0:	0018      	movs	r0, r3
 80006f2:	2324      	movs	r3, #36	; 0x24
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f002 f8ac 	bl	8002854 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <SystemClock_Config+0xd4>)
 8000702:	401a      	ands	r2, r3
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <SystemClock_Config+0xd0>)
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	0109      	lsls	r1, r1, #4
 800070a:	430a      	orrs	r2, r1
 800070c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800070e:	0021      	movs	r1, r4
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2210      	movs	r2, #16
 8000714:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2201      	movs	r2, #1
 800071a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	22a0      	movs	r2, #160	; 0xa0
 8000726:	0212      	lsls	r2, r2, #8
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2200      	movs	r2, #0
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	187b      	adds	r3, r7, r1
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fc76 	bl	8001024 <HAL_RCC_OscConfig>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800073c:	f000 f8c4 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	2124      	movs	r1, #36	; 0x24
 8000742:	187b      	adds	r3, r7, r1
 8000744:	220f      	movs	r2, #15
 8000746:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2100      	movs	r1, #0
 8000764:	0018      	movs	r0, r3
 8000766:	f001 f821 	bl	80017ac <HAL_RCC_ClockConfig>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800076e:	f000 f8ab 	bl	80008c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000772:	003b      	movs	r3, r7
 8000774:	2202      	movs	r2, #2
 8000776:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000778:	003b      	movs	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077e:	003b      	movs	r3, r7
 8000780:	0018      	movs	r0, r3
 8000782:	f001 fa37 	bl	8001bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 f89d 	bl	80008c8 <Error_Handler>
  }
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b01d      	add	sp, #116	; 0x74
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40007000 	.word	0x40007000
 800079c:	ffffe7ff 	.word	0xffffe7ff

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART2_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ac:	22e1      	movs	r2, #225	; 0xe1
 80007ae:	0252      	lsls	r2, r2, #9
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fb69 	bl	8001ebc <HAL_UART_Init>
 80007ea:	1e03      	subs	r3, r0, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f86b 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000008c 	.word	0x2000008c
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	240c      	movs	r4, #12
 8000808:	193b      	adds	r3, r7, r4
 800080a:	0018      	movs	r0, r3
 800080c:	2314      	movs	r3, #20
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f002 f81f 	bl	8002854 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_GPIO_Init+0xc0>)
 8000818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081a:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_GPIO_Init+0xc0>)
 800081c:	2104      	movs	r1, #4
 800081e:	430a      	orrs	r2, r1
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <MX_GPIO_Init+0xc0>)
 8000824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000826:	2204      	movs	r2, #4
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MX_GPIO_Init+0xc0>)
 8000830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_GPIO_Init+0xc0>)
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	430a      	orrs	r2, r1
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <MX_GPIO_Init+0xc0>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	4013      	ands	r3, r2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_GPIO_Init+0xc0>)
 8000848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_GPIO_Init+0xc0>)
 800084c:	2101      	movs	r1, #1
 800084e:	430a      	orrs	r2, r1
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_GPIO_Init+0xc0>)
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800085e:	23a0      	movs	r3, #160	; 0xa0
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fba4 	bl	8000fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	0192      	lsls	r2, r2, #6
 8000872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2284      	movs	r2, #132	; 0x84
 8000878:	0392      	lsls	r2, r2, #14
 800087a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	193b      	adds	r3, r7, r4
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000882:	193b      	adds	r3, r7, r4
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000886:	0019      	movs	r1, r3
 8000888:	0010      	movs	r0, r2
 800088a:	f000 fa1d 	bl	8000cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800088e:	0021      	movs	r1, r4
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2220      	movs	r2, #32
 8000894:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2201      	movs	r2, #1
 800089a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	187a      	adds	r2, r7, r1
 80008aa:	23a0      	movs	r3, #160	; 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	0011      	movs	r1, r2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fa09 	bl	8000cc8 <HAL_GPIO_Init>

}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b009      	add	sp, #36	; 0x24
 80008bc:	bd90      	pop	{r4, r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000
 80008c4:	50000800 	.word	0x50000800

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <HAL_MspInit+0x24>)
 80008da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x24>)
 80008de:	2101      	movs	r1, #1
 80008e0:	430a      	orrs	r2, r1
 80008e2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <HAL_MspInit+0x24>)
 80008e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_MspInit+0x24>)
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	0549      	lsls	r1, r1, #21
 80008ee:	430a      	orrs	r2, r1
 80008f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	240c      	movs	r4, #12
 8000906:	193b      	adds	r3, r7, r4
 8000908:	0018      	movs	r0, r3
 800090a:	2314      	movs	r3, #20
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f001 ffa0 	bl	8002854 <memset>
  if(huart->Instance==USART2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a18      	ldr	r2, [pc, #96]	; (800097c <HAL_UART_MspInit+0x80>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d129      	bne.n	8000972 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_UART_MspInit+0x84>)
 8000920:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_UART_MspInit+0x84>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0289      	lsls	r1, r1, #10
 8000928:	430a      	orrs	r2, r1
 800092a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_UART_MspInit+0x84>)
 800092e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <HAL_UART_MspInit+0x84>)
 8000932:	2101      	movs	r1, #1
 8000934:	430a      	orrs	r2, r1
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_UART_MspInit+0x84>)
 800093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093c:	2201      	movs	r2, #1
 800093e:	4013      	ands	r3, r2
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000944:	0021      	movs	r1, r4
 8000946:	187b      	adds	r3, r7, r1
 8000948:	220c      	movs	r2, #12
 800094a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2202      	movs	r2, #2
 8000950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2203      	movs	r2, #3
 800095c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2204      	movs	r2, #4
 8000962:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	187a      	adds	r2, r7, r1
 8000966:	23a0      	movs	r3, #160	; 0xa0
 8000968:	05db      	lsls	r3, r3, #23
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f000 f9ab 	bl	8000cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b009      	add	sp, #36	; 0x24
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40004400 	.word	0x40004400
 8000980:	40021000 	.word	0x40021000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f8be 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <_sbrk+0x5c>)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <_sbrk+0x60>)
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d102      	bne.n	80009d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <_sbrk+0x64>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <_sbrk+0x68>)
 80009d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	18d3      	adds	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d207      	bcs.n	80009f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e4:	f001 ff02 	bl	80027ec <__errno>
 80009e8:	0003      	movs	r3, r0
 80009ea:	220c      	movs	r2, #12
 80009ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	425b      	negs	r3, r3
 80009f2:	e009      	b.n	8000a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	18d2      	adds	r2, r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <_sbrk+0x64>)
 8000a04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a06:	68fb      	ldr	r3, [r7, #12]
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b006      	add	sp, #24
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20002000 	.word	0x20002000
 8000a14:	00000400 	.word	0x00000400
 8000a18:	20000110 	.word	0x20000110
 8000a1c:	20000128 	.word	0x20000128

08000a20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a32:	490e      	ldr	r1, [pc, #56]	; (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a56:	f7ff ffe3 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f001 fecd 	bl	80027f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5e:	f7ff fe09 	bl	8000674 <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   r0, =_estack
 8000a64:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a70:	08002a98 	.word	0x08002a98
  ldr r2, =_sbss
 8000a74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a78:	20000128 	.word	0x20000128

08000a7c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_COMP_IRQHandler>
	...

08000a80 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_Init+0x3c>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_Init+0x3c>)
 8000a92:	2140      	movs	r1, #64	; 0x40
 8000a94:	430a      	orrs	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 f811 	bl	8000ac0 <HAL_InitTick>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	e001      	b.n	8000aae <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aaa:	f7ff ff13 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_InitTick+0x5c>)
 8000aca:	681c      	ldr	r4, [r3, #0]
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_InitTick+0x60>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	23fa      	movs	r3, #250	; 0xfa
 8000ad4:	0098      	lsls	r0, r3, #2
 8000ad6:	f7ff fb17 	bl	8000108 <__udivsi3>
 8000ada:	0003      	movs	r3, r0
 8000adc:	0019      	movs	r1, r3
 8000ade:	0020      	movs	r0, r4
 8000ae0:	f7ff fb12 	bl	8000108 <__udivsi3>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f8e1 	bl	8000cae <HAL_SYSTICK_Config>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e00f      	b.n	8000b14 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	d80b      	bhi.n	8000b12 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	2301      	movs	r3, #1
 8000afe:	425b      	negs	r3, r3
 8000b00:	2200      	movs	r2, #0
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 f8be 	bl	8000c84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_InitTick+0x64>)
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b003      	add	sp, #12
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x20>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	18d2      	adds	r2, r2, r3
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_IncTick+0x20>)
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000114 	.word	0x20000114

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <HAL_GetTick+0x10>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000114 	.word	0x20000114

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	0002      	movs	r2, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b7f      	cmp	r3, #127	; 0x7f
 8000b74:	d828      	bhi.n	8000bc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <__NVIC_SetPriority+0xd4>)
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	33c0      	adds	r3, #192	; 0xc0
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	589b      	ldr	r3, [r3, r2]
 8000b86:	1dfa      	adds	r2, r7, #7
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	400a      	ands	r2, r1
 8000b90:	00d2      	lsls	r2, r2, #3
 8000b92:	21ff      	movs	r1, #255	; 0xff
 8000b94:	4091      	lsls	r1, r2
 8000b96:	000a      	movs	r2, r1
 8000b98:	43d2      	mvns	r2, r2
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	019b      	lsls	r3, r3, #6
 8000ba2:	22ff      	movs	r2, #255	; 0xff
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0018      	movs	r0, r3
 8000bac:	2303      	movs	r3, #3
 8000bae:	4003      	ands	r3, r0
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb4:	481f      	ldr	r0, [pc, #124]	; (8000c34 <__NVIC_SetPriority+0xd4>)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	089b      	lsrs	r3, r3, #2
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	33c0      	adds	r3, #192	; 0xc0
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bc6:	e031      	b.n	8000c2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc8:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <__NVIC_SetPriority+0xd8>)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	0019      	movs	r1, r3
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	400b      	ands	r3, r1
 8000bd4:	3b08      	subs	r3, #8
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3306      	adds	r3, #6
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	3304      	adds	r3, #4
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	1dfa      	adds	r2, r7, #7
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	0011      	movs	r1, r2
 8000be8:	2203      	movs	r2, #3
 8000bea:	400a      	ands	r2, r1
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	21ff      	movs	r1, #255	; 0xff
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	401a      	ands	r2, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	4003      	ands	r3, r0
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <__NVIC_SetPriority+0xd8>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	001c      	movs	r4, r3
 8000c18:	230f      	movs	r3, #15
 8000c1a:	4023      	ands	r3, r4
 8000c1c:	3b08      	subs	r3, #8
 8000c1e:	089b      	lsrs	r3, r3, #2
 8000c20:	430a      	orrs	r2, r1
 8000c22:	3306      	adds	r3, #6
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	18c3      	adds	r3, r0, r3
 8000c28:	3304      	adds	r3, #4
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b003      	add	sp, #12
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	045b      	lsls	r3, r3, #17
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d301      	bcc.n	8000c54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c50:	2301      	movs	r3, #1
 8000c52:	e010      	b.n	8000c76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <SysTick_Config+0x44>)
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	425b      	negs	r3, r3
 8000c60:	2103      	movs	r1, #3
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff ff7c 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SysTick_Config+0x44>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <SysTick_Config+0x44>)
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	e000e010 	.word	0xe000e010

08000c84 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	210f      	movs	r1, #15
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	1c02      	adds	r2, r0, #0
 8000c94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ff5d 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b004      	add	sp, #16
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff ffbf 	bl	8000c3c <SysTick_Config>
 8000cbe:	0003      	movs	r3, r0
}
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cde:	e14f      	b.n	8000f80 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4091      	lsls	r1, r2
 8000cea:	000a      	movs	r2, r1
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d100      	bne.n	8000cf8 <HAL_GPIO_Init+0x30>
 8000cf6:	e140      	b.n	8000f7a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d005      	beq.n	8000d10 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d130      	bne.n	8000d72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	0013      	movs	r3, r2
 8000d20:	43da      	mvns	r2, r3
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	409a      	lsls	r2, r3
 8000d32:	0013      	movs	r3, r2
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d46:	2201      	movs	r2, #1
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
 8000d64:	0013      	movs	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2203      	movs	r2, #3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d017      	beq.n	8000dae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2203      	movs	r2, #3
 8000db4:	4013      	ands	r3, r2
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d123      	bne.n	8000e02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	58d3      	ldr	r3, [r2, r3]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2207      	movs	r2, #7
 8000dcc:	4013      	ands	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2107      	movs	r1, #7
 8000de6:	400b      	ands	r3, r1
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	409a      	lsls	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	08da      	lsrs	r2, r3, #3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3208      	adds	r2, #8
 8000dfc:	0092      	lsls	r2, r2, #2
 8000dfe:	6939      	ldr	r1, [r7, #16]
 8000e00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	43da      	mvns	r2, r3
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2203      	movs	r2, #3
 8000e20:	401a      	ands	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	23c0      	movs	r3, #192	; 0xc0
 8000e3c:	029b      	lsls	r3, r3, #10
 8000e3e:	4013      	ands	r3, r2
 8000e40:	d100      	bne.n	8000e44 <HAL_GPIO_Init+0x17c>
 8000e42:	e09a      	b.n	8000f7a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	4b54      	ldr	r3, [pc, #336]	; (8000f98 <HAL_GPIO_Init+0x2d0>)
 8000e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e48:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e50:	4a52      	ldr	r2, [pc, #328]	; (8000f9c <HAL_GPIO_Init+0x2d4>)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	589b      	ldr	r3, [r3, r2]
 8000e5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2203      	movs	r2, #3
 8000e62:	4013      	ands	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	220f      	movs	r2, #15
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	0013      	movs	r3, r2
 8000e6c:	43da      	mvns	r2, r3
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	23a0      	movs	r3, #160	; 0xa0
 8000e78:	05db      	lsls	r3, r3, #23
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0x1ea>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a47      	ldr	r2, [pc, #284]	; (8000fa0 <HAL_GPIO_Init+0x2d8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d013      	beq.n	8000eae <HAL_GPIO_Init+0x1e6>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a46      	ldr	r2, [pc, #280]	; (8000fa4 <HAL_GPIO_Init+0x2dc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00d      	beq.n	8000eaa <HAL_GPIO_Init+0x1e2>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a45      	ldr	r2, [pc, #276]	; (8000fa8 <HAL_GPIO_Init+0x2e0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d007      	beq.n	8000ea6 <HAL_GPIO_Init+0x1de>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a44      	ldr	r2, [pc, #272]	; (8000fac <HAL_GPIO_Init+0x2e4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d101      	bne.n	8000ea2 <HAL_GPIO_Init+0x1da>
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	e008      	b.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000ea2:	2306      	movs	r3, #6
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e004      	b.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <HAL_GPIO_Init+0x1ec>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	400a      	ands	r2, r1
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec4:	4935      	ldr	r1, [pc, #212]	; (8000f9c <HAL_GPIO_Init+0x2d4>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	025b      	lsls	r3, r3, #9
 8000eea:	4013      	ands	r3, r2
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43da      	mvns	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	029b      	lsls	r3, r3, #10
 8000f14:	4013      	ands	r3, r2
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	035b      	lsls	r3, r3, #13
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	039b      	lsls	r3, r3, #14
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	40da      	lsrs	r2, r3
 8000f88:	1e13      	subs	r3, r2, #0
 8000f8a:	d000      	beq.n	8000f8e <HAL_GPIO_Init+0x2c6>
 8000f8c:	e6a8      	b.n	8000ce0 <HAL_GPIO_Init+0x18>
  }
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b006      	add	sp, #24
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	50000400 	.word	0x50000400
 8000fa4:	50000800 	.word	0x50000800
 8000fa8:	50000c00 	.word	0x50000c00
 8000fac:	50001c00 	.word	0x50001c00
 8000fb0:	40010400 	.word	0x40010400

08000fb4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	0008      	movs	r0, r1
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	1cbb      	adds	r3, r7, #2
 8000fc2:	1c02      	adds	r2, r0, #0
 8000fc4:	801a      	strh	r2, [r3, #0]
 8000fc6:	1c7b      	adds	r3, r7, #1
 8000fc8:	1c0a      	adds	r2, r1, #0
 8000fca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fcc:	1c7b      	adds	r3, r7, #1
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd4:	1cbb      	adds	r3, r7, #2
 8000fd6:	881a      	ldrh	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000fdc:	e003      	b.n	8000fe6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000fde:	1cbb      	adds	r3, r7, #2
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b084      	sub	sp, #16
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	000a      	movs	r2, r1
 8000ff8:	1cbb      	adds	r3, r7, #2
 8000ffa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001002:	1cbb      	adds	r3, r7, #2
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4013      	ands	r3, r2
 800100a:	041a      	lsls	r2, r3, #16
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	1cb9      	adds	r1, r7, #2
 8001012:	8809      	ldrh	r1, [r1, #0]
 8001014:	400b      	ands	r3, r1
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	619a      	str	r2, [r3, #24]
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b004      	add	sp, #16
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	f000 fbaf 	bl	8001796 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001038:	4bcf      	ldr	r3, [pc, #828]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	220c      	movs	r2, #12
 800103e:	4013      	ands	r3, r2
 8001040:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001042:	4bcd      	ldr	r3, [pc, #820]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	2380      	movs	r3, #128	; 0x80
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	4013      	ands	r3, r2
 800104c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2201      	movs	r2, #1
 8001054:	4013      	ands	r3, r2
 8001056:	d100      	bne.n	800105a <HAL_RCC_OscConfig+0x36>
 8001058:	e07e      	b.n	8001158 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	2b08      	cmp	r3, #8
 800105e:	d007      	beq.n	8001070 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	2b0c      	cmp	r3, #12
 8001064:	d112      	bne.n	800108c <HAL_RCC_OscConfig+0x68>
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	025b      	lsls	r3, r3, #9
 800106c:	429a      	cmp	r2, r3
 800106e:	d10d      	bne.n	800108c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001070:	4bc1      	ldr	r3, [pc, #772]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	029b      	lsls	r3, r3, #10
 8001078:	4013      	ands	r3, r2
 800107a:	d100      	bne.n	800107e <HAL_RCC_OscConfig+0x5a>
 800107c:	e06b      	b.n	8001156 <HAL_RCC_OscConfig+0x132>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d167      	bne.n	8001156 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	f000 fb85 	bl	8001796 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	025b      	lsls	r3, r3, #9
 8001094:	429a      	cmp	r2, r3
 8001096:	d107      	bne.n	80010a8 <HAL_RCC_OscConfig+0x84>
 8001098:	4bb7      	ldr	r3, [pc, #732]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4bb6      	ldr	r3, [pc, #728]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	0249      	lsls	r1, r1, #9
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e027      	b.n	80010f8 <HAL_RCC_OscConfig+0xd4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	23a0      	movs	r3, #160	; 0xa0
 80010ae:	02db      	lsls	r3, r3, #11
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d10e      	bne.n	80010d2 <HAL_RCC_OscConfig+0xae>
 80010b4:	4bb0      	ldr	r3, [pc, #704]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4baf      	ldr	r3, [pc, #700]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	02c9      	lsls	r1, r1, #11
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	4bad      	ldr	r3, [pc, #692]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4bac      	ldr	r3, [pc, #688]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0249      	lsls	r1, r1, #9
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e012      	b.n	80010f8 <HAL_RCC_OscConfig+0xd4>
 80010d2:	4ba9      	ldr	r3, [pc, #676]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4ba8      	ldr	r3, [pc, #672]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80010d8:	49a8      	ldr	r1, [pc, #672]	; (800137c <HAL_RCC_OscConfig+0x358>)
 80010da:	400a      	ands	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	4ba6      	ldr	r3, [pc, #664]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	025b      	lsls	r3, r3, #9
 80010e6:	4013      	ands	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4ba2      	ldr	r3, [pc, #648]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4ba1      	ldr	r3, [pc, #644]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80010f2:	49a3      	ldr	r1, [pc, #652]	; (8001380 <HAL_RCC_OscConfig+0x35c>)
 80010f4:	400a      	ands	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d015      	beq.n	800112c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fd24 	bl	8000b4c <HAL_GetTick>
 8001104:	0003      	movs	r3, r0
 8001106:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001108:	e009      	b.n	800111e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110a:	f7ff fd1f 	bl	8000b4c <HAL_GetTick>
 800110e:	0002      	movs	r2, r0
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b64      	cmp	r3, #100	; 0x64
 8001116:	d902      	bls.n	800111e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	f000 fb3c 	bl	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800111e:	4b96      	ldr	r3, [pc, #600]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	029b      	lsls	r3, r3, #10
 8001126:	4013      	ands	r3, r2
 8001128:	d0ef      	beq.n	800110a <HAL_RCC_OscConfig+0xe6>
 800112a:	e015      	b.n	8001158 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fd0e 	bl	8000b4c <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001136:	f7ff fd09 	bl	8000b4c <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e326      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001148:	4b8b      	ldr	r3, [pc, #556]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x112>
 8001154:	e000      	b.n	8001158 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001156:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2202      	movs	r2, #2
 800115e:	4013      	ands	r3, r2
 8001160:	d100      	bne.n	8001164 <HAL_RCC_OscConfig+0x140>
 8001162:	e08b      	b.n	800127c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	2b04      	cmp	r3, #4
 800116e:	d005      	beq.n	800117c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	2b0c      	cmp	r3, #12
 8001174:	d13e      	bne.n	80011f4 <HAL_RCC_OscConfig+0x1d0>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d13b      	bne.n	80011f4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800117c:	4b7e      	ldr	r3, [pc, #504]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2204      	movs	r2, #4
 8001182:	4013      	ands	r3, r2
 8001184:	d004      	beq.n	8001190 <HAL_RCC_OscConfig+0x16c>
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e302      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001190:	4b79      	ldr	r3, [pc, #484]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4a7b      	ldr	r2, [pc, #492]	; (8001384 <HAL_RCC_OscConfig+0x360>)
 8001196:	4013      	ands	r3, r2
 8001198:	0019      	movs	r1, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	021a      	lsls	r2, r3, #8
 80011a0:	4b75      	ldr	r3, [pc, #468]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80011a2:	430a      	orrs	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011a6:	4b74      	ldr	r3, [pc, #464]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2209      	movs	r2, #9
 80011ac:	4393      	bics	r3, r2
 80011ae:	0019      	movs	r1, r3
 80011b0:	4b71      	ldr	r3, [pc, #452]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011b8:	f000 fc40 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80011bc:	0001      	movs	r1, r0
 80011be:	4b6e      	ldr	r3, [pc, #440]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	220f      	movs	r2, #15
 80011c6:	4013      	ands	r3, r2
 80011c8:	4a6f      	ldr	r2, [pc, #444]	; (8001388 <HAL_RCC_OscConfig+0x364>)
 80011ca:	5cd3      	ldrb	r3, [r2, r3]
 80011cc:	000a      	movs	r2, r1
 80011ce:	40da      	lsrs	r2, r3
 80011d0:	4b6e      	ldr	r3, [pc, #440]	; (800138c <HAL_RCC_OscConfig+0x368>)
 80011d2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80011d4:	4b6e      	ldr	r3, [pc, #440]	; (8001390 <HAL_RCC_OscConfig+0x36c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2513      	movs	r5, #19
 80011da:	197c      	adds	r4, r7, r5
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff fc6f 	bl	8000ac0 <HAL_InitTick>
 80011e2:	0003      	movs	r3, r0
 80011e4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80011e6:	197b      	adds	r3, r7, r5
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d046      	beq.n	800127c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80011ee:	197b      	adds	r3, r7, r5
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	e2d0      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d027      	beq.n	800124a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011fa:	4b5f      	ldr	r3, [pc, #380]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2209      	movs	r2, #9
 8001200:	4393      	bics	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fc9e 	bl	8000b4c <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fc99 	bl	8000b4c <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e2b6      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001228:	4b53      	ldr	r3, [pc, #332]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2204      	movs	r2, #4
 800122e:	4013      	ands	r3, r2
 8001230:	d0f1      	beq.n	8001216 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	4b51      	ldr	r3, [pc, #324]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a53      	ldr	r2, [pc, #332]	; (8001384 <HAL_RCC_OscConfig+0x360>)
 8001238:	4013      	ands	r3, r2
 800123a:	0019      	movs	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	021a      	lsls	r2, r3, #8
 8001242:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001244:	430a      	orrs	r2, r1
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	e018      	b.n	800127c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001250:	2101      	movs	r1, #1
 8001252:	438a      	bics	r2, r1
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7ff fc79 	bl	8000b4c <HAL_GetTick>
 800125a:	0003      	movs	r3, r0
 800125c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001260:	f7ff fc74 	bl	8000b4c <HAL_GetTick>
 8001264:	0002      	movs	r2, r0
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e291      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2204      	movs	r2, #4
 8001278:	4013      	ands	r3, r2
 800127a:	d1f1      	bne.n	8001260 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2210      	movs	r2, #16
 8001282:	4013      	ands	r3, r2
 8001284:	d100      	bne.n	8001288 <HAL_RCC_OscConfig+0x264>
 8001286:	e0a1      	b.n	80013cc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d140      	bne.n	8001310 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128e:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4013      	ands	r3, r2
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x282>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e277      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012a6:	4b34      	ldr	r3, [pc, #208]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <HAL_RCC_OscConfig+0x370>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80012b6:	430a      	orrs	r2, r1
 80012b8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	0a19      	lsrs	r1, r3, #8
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	061a      	lsls	r2, r3, #24
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80012ca:	430a      	orrs	r2, r1
 80012cc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	0b5b      	lsrs	r3, r3, #13
 80012d4:	3301      	adds	r3, #1
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	0212      	lsls	r2, r2, #8
 80012da:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	210f      	movs	r1, #15
 80012e4:	400b      	ands	r3, r1
 80012e6:	4928      	ldr	r1, [pc, #160]	; (8001388 <HAL_RCC_OscConfig+0x364>)
 80012e8:	5ccb      	ldrb	r3, [r1, r3]
 80012ea:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_RCC_OscConfig+0x368>)
 80012ee:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <HAL_RCC_OscConfig+0x36c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2513      	movs	r5, #19
 80012f6:	197c      	adds	r4, r7, r5
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff fbe1 	bl	8000ac0 <HAL_InitTick>
 80012fe:	0003      	movs	r3, r0
 8001300:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001302:	197b      	adds	r3, r7, r5
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d060      	beq.n	80013cc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800130a:	197b      	adds	r3, r7, r5
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	e242      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d03f      	beq.n	8001398 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	0049      	lsls	r1, r1, #1
 8001322:	430a      	orrs	r2, r1
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fc11 	bl	8000b4c <HAL_GetTick>
 800132a:	0003      	movs	r3, r0
 800132c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001330:	f7ff fc0c 	bl	8000b4c <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e229      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4013      	ands	r3, r2
 800134c:	d0f0      	beq.n	8001330 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a10      	ldr	r2, [pc, #64]	; (8001394 <HAL_RCC_OscConfig+0x370>)
 8001354:	4013      	ands	r3, r2
 8001356:	0019      	movs	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 800135e:	430a      	orrs	r2, r1
 8001360:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	0a19      	lsrs	r1, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	061a      	lsls	r2, r3, #24
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <HAL_RCC_OscConfig+0x354>)
 8001372:	430a      	orrs	r2, r1
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	e029      	b.n	80013cc <HAL_RCC_OscConfig+0x3a8>
 8001378:	40021000 	.word	0x40021000
 800137c:	fffeffff 	.word	0xfffeffff
 8001380:	fffbffff 	.word	0xfffbffff
 8001384:	ffffe0ff 	.word	0xffffe0ff
 8001388:	08002a1c 	.word	0x08002a1c
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004
 8001394:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001398:	4bbd      	ldr	r3, [pc, #756]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4bbc      	ldr	r3, [pc, #752]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 800139e:	49bd      	ldr	r1, [pc, #756]	; (8001694 <HAL_RCC_OscConfig+0x670>)
 80013a0:	400a      	ands	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fbd2 	bl	8000b4c <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ae:	f7ff fbcd 	bl	8000b4c <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1ea      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013c0:	4bb3      	ldr	r3, [pc, #716]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2208      	movs	r2, #8
 80013d2:	4013      	ands	r3, r2
 80013d4:	d036      	beq.n	8001444 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d019      	beq.n	8001412 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013de:	4bac      	ldr	r3, [pc, #688]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80013e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013e2:	4bab      	ldr	r3, [pc, #684]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	430a      	orrs	r2, r1
 80013e8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fbaf 	bl	8000b4c <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fbaa 	bl	8000b4c <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1c7      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001406:	4ba2      	ldr	r3, [pc, #648]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d0f1      	beq.n	80013f4 <HAL_RCC_OscConfig+0x3d0>
 8001410:	e018      	b.n	8001444 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001412:	4b9f      	ldr	r3, [pc, #636]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001416:	4b9e      	ldr	r3, [pc, #632]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001418:	2101      	movs	r1, #1
 800141a:	438a      	bics	r2, r1
 800141c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff fb95 	bl	8000b4c <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fb90 	bl	8000b4c <HAL_GetTick>
 800142c:	0002      	movs	r2, r0
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e1ad      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800143a:	4b95      	ldr	r3, [pc, #596]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 800143c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143e:	2202      	movs	r2, #2
 8001440:	4013      	ands	r3, r2
 8001442:	d1f1      	bne.n	8001428 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2204      	movs	r2, #4
 800144a:	4013      	ands	r3, r2
 800144c:	d100      	bne.n	8001450 <HAL_RCC_OscConfig+0x42c>
 800144e:	e0ae      	b.n	80015ae <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001450:	2027      	movs	r0, #39	; 0x27
 8001452:	183b      	adds	r3, r7, r0
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001458:	4b8d      	ldr	r3, [pc, #564]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 800145a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	055b      	lsls	r3, r3, #21
 8001460:	4013      	ands	r3, r2
 8001462:	d109      	bne.n	8001478 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	4b8a      	ldr	r3, [pc, #552]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001468:	4b89      	ldr	r3, [pc, #548]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 800146a:	2180      	movs	r1, #128	; 0x80
 800146c:	0549      	lsls	r1, r1, #21
 800146e:	430a      	orrs	r2, r1
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001472:	183b      	adds	r3, r7, r0
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4b87      	ldr	r3, [pc, #540]	; (8001698 <HAL_RCC_OscConfig+0x674>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	4013      	ands	r3, r2
 8001482:	d11a      	bne.n	80014ba <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001484:	4b84      	ldr	r3, [pc, #528]	; (8001698 <HAL_RCC_OscConfig+0x674>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b83      	ldr	r3, [pc, #524]	; (8001698 <HAL_RCC_OscConfig+0x674>)
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	0049      	lsls	r1, r1, #1
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb5b 	bl	8000b4c <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149c:	f7ff fb56 	bl	8000b4c <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	; 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e173      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b7a      	ldr	r3, [pc, #488]	; (8001698 <HAL_RCC_OscConfig+0x674>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_OscConfig+0x4b2>
 80014c6:	4b72      	ldr	r3, [pc, #456]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ca:	4b71      	ldr	r3, [pc, #452]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	0049      	lsls	r1, r1, #1
 80014d0:	430a      	orrs	r2, r1
 80014d2:	651a      	str	r2, [r3, #80]	; 0x50
 80014d4:	e031      	b.n	800153a <HAL_RCC_OscConfig+0x516>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4d4>
 80014de:	4b6c      	ldr	r3, [pc, #432]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014e2:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014e4:	496b      	ldr	r1, [pc, #428]	; (8001694 <HAL_RCC_OscConfig+0x670>)
 80014e6:	400a      	ands	r2, r1
 80014e8:	651a      	str	r2, [r3, #80]	; 0x50
 80014ea:	4b69      	ldr	r3, [pc, #420]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014ee:	4b68      	ldr	r3, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80014f0:	496a      	ldr	r1, [pc, #424]	; (800169c <HAL_RCC_OscConfig+0x678>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	651a      	str	r2, [r3, #80]	; 0x50
 80014f6:	e020      	b.n	800153a <HAL_RCC_OscConfig+0x516>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	23a0      	movs	r3, #160	; 0xa0
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	429a      	cmp	r2, r3
 8001502:	d10e      	bne.n	8001522 <HAL_RCC_OscConfig+0x4fe>
 8001504:	4b62      	ldr	r3, [pc, #392]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	00c9      	lsls	r1, r1, #3
 800150e:	430a      	orrs	r2, r1
 8001510:	651a      	str	r2, [r3, #80]	; 0x50
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001516:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	0049      	lsls	r1, r1, #1
 800151c:	430a      	orrs	r2, r1
 800151e:	651a      	str	r2, [r3, #80]	; 0x50
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x516>
 8001522:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001526:	4b5a      	ldr	r3, [pc, #360]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001528:	495a      	ldr	r1, [pc, #360]	; (8001694 <HAL_RCC_OscConfig+0x670>)
 800152a:	400a      	ands	r2, r1
 800152c:	651a      	str	r2, [r3, #80]	; 0x50
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001532:	4b57      	ldr	r3, [pc, #348]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001534:	4959      	ldr	r1, [pc, #356]	; (800169c <HAL_RCC_OscConfig+0x678>)
 8001536:	400a      	ands	r2, r1
 8001538:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb03 	bl	8000b4c <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800154a:	e009      	b.n	8001560 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154c:	f7ff fafe 	bl	8000b4c <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	4a52      	ldr	r2, [pc, #328]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e11a      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4013      	ands	r3, r2
 800156a:	d0ef      	beq.n	800154c <HAL_RCC_OscConfig+0x528>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff faed 	bl	8000b4c <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001576:	e009      	b.n	800158c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fae8 	bl	8000b4c <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	4a47      	ldr	r2, [pc, #284]	; (80016a0 <HAL_RCC_OscConfig+0x67c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e104      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800158c:	4b40      	ldr	r3, [pc, #256]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 800158e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d1ef      	bne.n	8001578 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001598:	2327      	movs	r3, #39	; 0x27
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d105      	bne.n	80015ae <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a2:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015a6:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015a8:	493e      	ldr	r1, [pc, #248]	; (80016a4 <HAL_RCC_OscConfig+0x680>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2220      	movs	r2, #32
 80015b4:	4013      	ands	r3, r2
 80015b6:	d049      	beq.n	800164c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d026      	beq.n	800160e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015c0:	4b33      	ldr	r3, [pc, #204]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
 80015d8:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <HAL_RCC_OscConfig+0x684>)
 80015da:	6a1a      	ldr	r2, [r3, #32]
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_RCC_OscConfig+0x684>)
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	0189      	lsls	r1, r1, #6
 80015e2:	430a      	orrs	r2, r1
 80015e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fab1 	bl	8000b4c <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f0:	f7ff faac 	bl	8000b4c <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0c9      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2202      	movs	r2, #2
 8001608:	4013      	ands	r3, r2
 800160a:	d0f1      	beq.n	80015f0 <HAL_RCC_OscConfig+0x5cc>
 800160c:	e01e      	b.n	800164c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001614:	2101      	movs	r1, #1
 8001616:	438a      	bics	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_RCC_OscConfig+0x684>)
 800161c:	6a1a      	ldr	r2, [r3, #32]
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_RCC_OscConfig+0x684>)
 8001620:	4922      	ldr	r1, [pc, #136]	; (80016ac <HAL_RCC_OscConfig+0x688>)
 8001622:	400a      	ands	r2, r1
 8001624:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff fa91 	bl	8000b4c <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001630:	f7ff fa8c 	bl	8000b4c <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0a9      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d1f1      	bne.n	8001630 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	d100      	bne.n	8001656 <HAL_RCC_OscConfig+0x632>
 8001654:	e09e      	b.n	8001794 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	2b0c      	cmp	r3, #12
 800165a:	d100      	bne.n	800165e <HAL_RCC_OscConfig+0x63a>
 800165c:	e077      	b.n	800174e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	2b02      	cmp	r3, #2
 8001664:	d158      	bne.n	8001718 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_RCC_OscConfig+0x66c>)
 800166c:	4910      	ldr	r1, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x68c>)
 800166e:	400a      	ands	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fa6b 	bl	8000b4c <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800167a:	e01b      	b.n	80016b4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fa66 	bl	8000b4c <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d914      	bls.n	80016b4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e083      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	40021000 	.word	0x40021000
 8001694:	fffffeff 	.word	0xfffffeff
 8001698:	40007000 	.word	0x40007000
 800169c:	fffffbff 	.word	0xfffffbff
 80016a0:	00001388 	.word	0x00001388
 80016a4:	efffffff 	.word	0xefffffff
 80016a8:	40010000 	.word	0x40010000
 80016ac:	ffffdfff 	.word	0xffffdfff
 80016b0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_RCC_OscConfig+0x77c>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	049b      	lsls	r3, r3, #18
 80016bc:	4013      	ands	r3, r2
 80016be:	d1dd      	bne.n	800167c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c0:	4b37      	ldr	r3, [pc, #220]	; (80017a0 <HAL_RCC_OscConfig+0x77c>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a37      	ldr	r2, [pc, #220]	; (80017a4 <HAL_RCC_OscConfig+0x780>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	0019      	movs	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	431a      	orrs	r2, r3
 80016da:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_RCC_OscConfig+0x77c>)
 80016dc:	430a      	orrs	r2, r1
 80016de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_RCC_OscConfig+0x77c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_RCC_OscConfig+0x77c>)
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	0449      	lsls	r1, r1, #17
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fa2d 	bl	8000b4c <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fa28 	bl	8000b4c <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e045      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800170a:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <HAL_RCC_OscConfig+0x77c>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	049b      	lsls	r3, r3, #18
 8001712:	4013      	ands	r3, r2
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x6d4>
 8001716:	e03d      	b.n	8001794 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <HAL_RCC_OscConfig+0x77c>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_RCC_OscConfig+0x77c>)
 800171e:	4922      	ldr	r1, [pc, #136]	; (80017a8 <HAL_RCC_OscConfig+0x784>)
 8001720:	400a      	ands	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fa12 	bl	8000b4c <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff fa0d 	bl	8000b4c <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e02a      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_RCC_OscConfig+0x77c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	049b      	lsls	r3, r3, #18
 8001748:	4013      	ands	r3, r2
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x70a>
 800174c:	e022      	b.n	8001794 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e01d      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_RCC_OscConfig+0x77c>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	025b      	lsls	r3, r3, #9
 8001766:	401a      	ands	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	429a      	cmp	r2, r3
 800176e:	d10f      	bne.n	8001790 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	23f0      	movs	r3, #240	; 0xf0
 8001774:	039b      	lsls	r3, r3, #14
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d107      	bne.n	8001790 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	23c0      	movs	r3, #192	; 0xc0
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	401a      	ands	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b00a      	add	sp, #40	; 0x28
 800179c:	bdb0      	pop	{r4, r5, r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	40021000 	.word	0x40021000
 80017a4:	ff02ffff 	.word	0xff02ffff
 80017a8:	feffffff 	.word	0xfeffffff

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e128      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b96      	ldr	r3, [pc, #600]	; (8001a1c <HAL_RCC_ClockConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d91e      	bls.n	800180c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b93      	ldr	r3, [pc, #588]	; (8001a1c <HAL_RCC_ClockConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4393      	bics	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	4b90      	ldr	r3, [pc, #576]	; (8001a1c <HAL_RCC_ClockConfig+0x270>)
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017e0:	f7ff f9b4 	bl	8000b4c <HAL_GetTick>
 80017e4:	0003      	movs	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e8:	e009      	b.n	80017fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ea:	f7ff f9af 	bl	8000b4c <HAL_GetTick>
 80017ee:	0002      	movs	r2, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	4a8a      	ldr	r2, [pc, #552]	; (8001a20 <HAL_RCC_ClockConfig+0x274>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e109      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b87      	ldr	r3, [pc, #540]	; (8001a1c <HAL_RCC_ClockConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2201      	movs	r2, #1
 8001804:	4013      	ands	r3, r2
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d1ee      	bne.n	80017ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	d009      	beq.n	800182a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001816:	4b83      	ldr	r3, [pc, #524]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	22f0      	movs	r2, #240	; 0xf0
 800181c:	4393      	bics	r3, r2
 800181e:	0019      	movs	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001826:	430a      	orrs	r2, r1
 8001828:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2201      	movs	r2, #1
 8001830:	4013      	ands	r3, r2
 8001832:	d100      	bne.n	8001836 <HAL_RCC_ClockConfig+0x8a>
 8001834:	e089      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800183e:	4b79      	ldr	r3, [pc, #484]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	029b      	lsls	r3, r3, #10
 8001846:	4013      	ands	r3, r2
 8001848:	d120      	bne.n	800188c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0e1      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001856:	4b73      	ldr	r3, [pc, #460]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	049b      	lsls	r3, r3, #18
 800185e:	4013      	ands	r3, r2
 8001860:	d114      	bne.n	800188c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0d5      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d106      	bne.n	800187c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800186e:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2204      	movs	r2, #4
 8001874:	4013      	ands	r3, r2
 8001876:	d109      	bne.n	800188c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0ca      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800187c:	4b69      	ldr	r3, [pc, #420]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0c2      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188c:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2203      	movs	r2, #3
 8001892:	4393      	bics	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 800189c:	430a      	orrs	r2, r1
 800189e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff f954 	bl	8000b4c <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d111      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b2:	f7ff f94b 	bl	8000b4c <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_RCC_ClockConfig+0x274>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e0a5      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c6:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	220c      	movs	r2, #12
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d1ef      	bne.n	80018b2 <HAL_RCC_ClockConfig+0x106>
 80018d2:	e03a      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d111      	bne.n	8001900 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018dc:	e009      	b.n	80018f2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018de:	f7ff f935 	bl	8000b4c <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	4a4d      	ldr	r2, [pc, #308]	; (8001a20 <HAL_RCC_ClockConfig+0x274>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e08f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f2:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	220c      	movs	r2, #12
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b0c      	cmp	r3, #12
 80018fc:	d1ef      	bne.n	80018de <HAL_RCC_ClockConfig+0x132>
 80018fe:	e024      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d11b      	bne.n	8001940 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001908:	e009      	b.n	800191e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190a:	f7ff f91f 	bl	8000b4c <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	4a42      	ldr	r2, [pc, #264]	; (8001a20 <HAL_RCC_ClockConfig+0x274>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e079      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	220c      	movs	r2, #12
 8001924:	4013      	ands	r3, r2
 8001926:	2b04      	cmp	r3, #4
 8001928:	d1ef      	bne.n	800190a <HAL_RCC_ClockConfig+0x15e>
 800192a:	e00e      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192c:	f7ff f90e 	bl	8000b4c <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	4a3a      	ldr	r2, [pc, #232]	; (8001a20 <HAL_RCC_ClockConfig+0x274>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e068      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001940:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	220c      	movs	r2, #12
 8001946:	4013      	ands	r3, r2
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_RCC_ClockConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2201      	movs	r2, #1
 8001950:	4013      	ands	r3, r2
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d21e      	bcs.n	8001996 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001958:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_RCC_ClockConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	4393      	bics	r3, r2
 8001960:	0019      	movs	r1, r3
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_RCC_ClockConfig+0x270>)
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800196a:	f7ff f8ef 	bl	8000b4c <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	e009      	b.n	8001988 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff f8ea 	bl	8000b4c <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	4a28      	ldr	r2, [pc, #160]	; (8001a20 <HAL_RCC_ClockConfig+0x274>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e044      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_RCC_ClockConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d1ee      	bne.n	8001974 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	d009      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x27c>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2208      	movs	r2, #8
 80019ba:	4013      	ands	r3, r2
 80019bc:	d00a      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4a1a      	ldr	r2, [pc, #104]	; (8001a2c <HAL_RCC_ClockConfig+0x280>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	00da      	lsls	r2, r3, #3
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d4:	f000 f832 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019d8:	0001      	movs	r1, r0
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_ClockConfig+0x278>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	220f      	movs	r2, #15
 80019e2:	4013      	ands	r3, r2
 80019e4:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <HAL_RCC_ClockConfig+0x284>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	000a      	movs	r2, r1
 80019ea:	40da      	lsrs	r2, r3
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_RCC_ClockConfig+0x288>)
 80019ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019f0:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_RCC_ClockConfig+0x28c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	250b      	movs	r5, #11
 80019f6:	197c      	adds	r4, r7, r5
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff f861 	bl	8000ac0 <HAL_InitTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a02:	197b      	adds	r3, r7, r5
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a0a:	197b      	adds	r3, r7, r5
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b004      	add	sp, #16
 8001a18:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40022000 	.word	0x40022000
 8001a20:	00001388 	.word	0x00001388
 8001a24:	40021000 	.word	0x40021000
 8001a28:	fffff8ff 	.word	0xfffff8ff
 8001a2c:	ffffc7ff 	.word	0xffffc7ff
 8001a30:	08002a1c 	.word	0x08002a1c
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	b5b0      	push	{r4, r5, r7, lr}
 8001a3e:	b08e      	sub	sp, #56	; 0x38
 8001a40:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a42:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d014      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x40>
 8001a52:	d900      	bls.n	8001a56 <HAL_RCC_GetSysClockFreq+0x1a>
 8001a54:	e07b      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x112>
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d002      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x24>
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d00b      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a5e:	e076      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a60:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2210      	movs	r2, #16
 8001a66:	4013      	ands	r3, r2
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a6e:	e07c      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x140>)
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a74:	e079      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a76:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a7a:	e076      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	0c9a      	lsrs	r2, r3, #18
 8001a80:	230f      	movs	r3, #15
 8001a82:	401a      	ands	r2, r3
 8001a84:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x148>)
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	0d9a      	lsrs	r2, r3, #22
 8001a8e:	2303      	movs	r3, #3
 8001a90:	4013      	ands	r3, r2
 8001a92:	3301      	adds	r3, #1
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	025b      	lsls	r3, r3, #9
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d01a      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	4a35      	ldr	r2, [pc, #212]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x144>)
 8001aac:	2300      	movs	r3, #0
 8001aae:	69b8      	ldr	r0, [r7, #24]
 8001ab0:	69f9      	ldr	r1, [r7, #28]
 8001ab2:	f7fe fbd5 	bl	8000260 <__aeabi_lmul>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	000b      	movs	r3, r1
 8001aba:	0010      	movs	r0, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f7fe fba9 	bl	8000220 <__aeabi_uldivmod>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	000b      	movs	r3, r1
 8001ad2:	0013      	movs	r3, r2
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad6:	e037      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ad8:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2210      	movs	r2, #16
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d01a      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001aec:	2300      	movs	r3, #0
 8001aee:	68b8      	ldr	r0, [r7, #8]
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	f7fe fbb5 	bl	8000260 <__aeabi_lmul>
 8001af6:	0002      	movs	r2, r0
 8001af8:	000b      	movs	r3, r1
 8001afa:	0010      	movs	r0, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f7fe fb89 	bl	8000220 <__aeabi_uldivmod>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	000b      	movs	r3, r1
 8001b12:	0013      	movs	r3, r2
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
 8001b16:	e017      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	0019      	movs	r1, r3
 8001b20:	4a16      	ldr	r2, [pc, #88]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x140>)
 8001b22:	2300      	movs	r3, #0
 8001b24:	f7fe fb9c 	bl	8000260 <__aeabi_lmul>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	000b      	movs	r3, r1
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	001c      	movs	r4, r3
 8001b34:	2300      	movs	r3, #0
 8001b36:	001d      	movs	r5, r3
 8001b38:	0022      	movs	r2, r4
 8001b3a:	002b      	movs	r3, r5
 8001b3c:	f7fe fb70 	bl	8000220 <__aeabi_uldivmod>
 8001b40:	0002      	movs	r2, r0
 8001b42:	000b      	movs	r3, r1
 8001b44:	0013      	movs	r3, r2
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b4c:	e00d      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0b5b      	lsrs	r3, r3, #13
 8001b54:	2207      	movs	r2, #7
 8001b56:	4013      	ands	r3, r2
 8001b58:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	0212      	lsls	r2, r2, #8
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b68:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b00e      	add	sp, #56	; 0x38
 8001b72:	bdb0      	pop	{r4, r5, r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	003d0900 	.word	0x003d0900
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	007a1200 	.word	0x007a1200
 8001b84:	08002a34 	.word	0x08002a34

08001b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b8c:	4b02      	ldr	r3, [pc, #8]	; (8001b98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff2 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001ba4:	0001      	movs	r1, r0
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	2207      	movs	r2, #7
 8001bae:	4013      	ands	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	40d9      	lsrs	r1, r3
 8001bb6:	000b      	movs	r3, r1
}
 8001bb8:	0018      	movs	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	08002a2c 	.word	0x08002a2c

08001bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bcc:	f7ff ffdc 	bl	8001b88 <HAL_RCC_GetHCLKFreq>
 8001bd0:	0001      	movs	r1, r0
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	0adb      	lsrs	r3, r3, #11
 8001bd8:	2207      	movs	r2, #7
 8001bda:	4013      	ands	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	40d9      	lsrs	r1, r3
 8001be2:	000b      	movs	r3, r1
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	08002a2c 	.word	0x08002a2c

08001bf4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001bfc:	2317      	movs	r3, #23
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d106      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	4013      	ands	r3, r2
 8001c18:	d100      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001c1a:	e0d9      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1c:	4b9c      	ldr	r3, [pc, #624]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	055b      	lsls	r3, r3, #21
 8001c24:	4013      	ands	r3, r2
 8001c26:	d10a      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	4b99      	ldr	r3, [pc, #612]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c2c:	4b98      	ldr	r3, [pc, #608]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	0549      	lsls	r1, r1, #21
 8001c32:	430a      	orrs	r2, r1
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c36:	2317      	movs	r3, #23
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b95      	ldr	r3, [pc, #596]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	d11a      	bne.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4a:	4b92      	ldr	r3, [pc, #584]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b91      	ldr	r3, [pc, #580]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0049      	lsls	r1, r1, #1
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c58:	f7fe ff78 	bl	8000b4c <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7fe ff73 	bl	8000b4c <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e108      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b87      	ldr	r3, [pc, #540]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c80:	4b83      	ldr	r3, [pc, #524]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	23c0      	movs	r3, #192	; 0xc0
 8001c86:	039b      	lsls	r3, r3, #14
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	23c0      	movs	r3, #192	; 0xc0
 8001c92:	039b      	lsls	r3, r3, #14
 8001c94:	4013      	ands	r3, r2
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d107      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	23c0      	movs	r3, #192	; 0xc0
 8001ca2:	039b      	lsls	r3, r3, #14
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	23c0      	movs	r3, #192	; 0xc0
 8001cb2:	029b      	lsls	r3, r3, #10
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	23c0      	movs	r3, #192	; 0xc0
 8001cb8:	029b      	lsls	r3, r3, #10
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d10a      	bne.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001cbe:	4b74      	ldr	r3, [pc, #464]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	029b      	lsls	r3, r3, #10
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0d8      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001cd4:	4b6e      	ldr	r3, [pc, #440]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cd8:	23c0      	movs	r3, #192	; 0xc0
 8001cda:	029b      	lsls	r3, r3, #10
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d049      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	23c0      	movs	r3, #192	; 0xc0
 8001cec:	029b      	lsls	r3, r3, #10
 8001cee:	4013      	ands	r3, r2
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d004      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d10d      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	23c0      	movs	r3, #192	; 0xc0
 8001d06:	029b      	lsls	r3, r3, #10
 8001d08:	4013      	ands	r3, r2
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d034      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d02e      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d1c:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d20:	4a5d      	ldr	r2, [pc, #372]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d26:	4b5a      	ldr	r3, [pc, #360]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d2a:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	0309      	lsls	r1, r1, #12
 8001d30:	430a      	orrs	r2, r1
 8001d32:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d34:	4b56      	ldr	r3, [pc, #344]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d38:	4b55      	ldr	r3, [pc, #340]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d3a:	4958      	ldr	r1, [pc, #352]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d014      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe fefc 	bl	8000b4c <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d58:	e009      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7fe fef7 	bl	8000b4c <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	4a4e      	ldr	r2, [pc, #312]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e08b      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d6e:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d0ef      	beq.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	23c0      	movs	r3, #192	; 0xc0
 8001d80:	029b      	lsls	r3, r3, #10
 8001d82:	401a      	ands	r2, r3
 8001d84:	23c0      	movs	r3, #192	; 0xc0
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d10c      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001d8c:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a44      	ldr	r2, [pc, #272]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	23c0      	movs	r3, #192	; 0xc0
 8001d9c:	039b      	lsls	r3, r3, #14
 8001d9e:	401a      	ands	r2, r3
 8001da0:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001da8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	23c0      	movs	r3, #192	; 0xc0
 8001db0:	029b      	lsls	r3, r3, #10
 8001db2:	401a      	ands	r2, r3
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dba:	2317      	movs	r3, #23
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc8:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dca:	4937      	ldr	r1, [pc, #220]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d009      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dda:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	2203      	movs	r2, #3
 8001de0:	4393      	bics	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	4b29      	ldr	r3, [pc, #164]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dea:	430a      	orrs	r2, r1
 8001dec:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d009      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001df8:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	220c      	movs	r2, #12
 8001dfe:	4393      	bics	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2204      	movs	r2, #4
 8001e12:	4013      	ands	r3, r2
 8001e14:	d009      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a24      	ldr	r2, [pc, #144]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2208      	movs	r2, #8
 8001e30:	4013      	ands	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2240      	movs	r2, #64	; 0x40
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d009      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1a      	ldr	r2, [r3, #32]
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d009      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001e80:	430a      	orrs	r2, r1
 8001e82:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b006      	add	sp, #24
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40007000 	.word	0x40007000
 8001e98:	fffcffff 	.word	0xfffcffff
 8001e9c:	fff7ffff 	.word	0xfff7ffff
 8001ea0:	00001388 	.word	0x00001388
 8001ea4:	ffcfffff 	.word	0xffcfffff
 8001ea8:	efffffff 	.word	0xefffffff
 8001eac:	fffff3ff 	.word	0xfffff3ff
 8001eb0:	ffffcfff 	.word	0xffffcfff
 8001eb4:	fbffffff 	.word	0xfbffffff
 8001eb8:	fff3ffff 	.word	0xfff3ffff

08001ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e044      	b.n	8001f58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d107      	bne.n	8001ee6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2274      	movs	r2, #116	; 0x74
 8001eda:	2100      	movs	r1, #0
 8001edc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7fe fd0b 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2224      	movs	r2, #36	; 0x24
 8001eea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	438a      	bics	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f830 	bl	8001f64 <UART_SetConfig>
 8001f04:	0003      	movs	r3, r0
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e024      	b.n	8001f58 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 faa7 	bl	800246c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	490d      	ldr	r1, [pc, #52]	; (8001f60 <HAL_UART_Init+0xa4>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	212a      	movs	r1, #42	; 0x2a
 8001f3a:	438a      	bics	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f000 fb3f 	bl	80025d4 <UART_CheckIdleState>
 8001f56:	0003      	movs	r3, r0
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	ffffb7ff 	.word	0xffffb7ff

08001f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f64:	b5b0      	push	{r4, r5, r7, lr}
 8001f66:	b08e      	sub	sp, #56	; 0x38
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f6c:	231a      	movs	r3, #26
 8001f6e:	2218      	movs	r2, #24
 8001f70:	189b      	adds	r3, r3, r2
 8001f72:	19db      	adds	r3, r3, r7
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4ac6      	ldr	r2, [pc, #792]	; (80022b0 <UART_SetConfig+0x34c>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4ac1      	ldr	r2, [pc, #772]	; (80022b4 <UART_SetConfig+0x350>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4abb      	ldr	r2, [pc, #748]	; (80022b8 <UART_SetConfig+0x354>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d004      	beq.n	8001fd8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4ab7      	ldr	r2, [pc, #732]	; (80022bc <UART_SetConfig+0x358>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4ab3      	ldr	r2, [pc, #716]	; (80022c0 <UART_SetConfig+0x35c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d131      	bne.n	800205c <UART_SetConfig+0xf8>
 8001ff8:	4bb2      	ldr	r3, [pc, #712]	; (80022c4 <UART_SetConfig+0x360>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b03      	cmp	r3, #3
 8002002:	d01d      	beq.n	8002040 <UART_SetConfig+0xdc>
 8002004:	d823      	bhi.n	800204e <UART_SetConfig+0xea>
 8002006:	2b02      	cmp	r3, #2
 8002008:	d00c      	beq.n	8002024 <UART_SetConfig+0xc0>
 800200a:	d820      	bhi.n	800204e <UART_SetConfig+0xea>
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <UART_SetConfig+0xb2>
 8002010:	2b01      	cmp	r3, #1
 8002012:	d00e      	beq.n	8002032 <UART_SetConfig+0xce>
 8002014:	e01b      	b.n	800204e <UART_SetConfig+0xea>
 8002016:	231b      	movs	r3, #27
 8002018:	2218      	movs	r2, #24
 800201a:	189b      	adds	r3, r3, r2
 800201c:	19db      	adds	r3, r3, r7
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	e09c      	b.n	800215e <UART_SetConfig+0x1fa>
 8002024:	231b      	movs	r3, #27
 8002026:	2218      	movs	r2, #24
 8002028:	189b      	adds	r3, r3, r2
 800202a:	19db      	adds	r3, r3, r7
 800202c:	2202      	movs	r2, #2
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e095      	b.n	800215e <UART_SetConfig+0x1fa>
 8002032:	231b      	movs	r3, #27
 8002034:	2218      	movs	r2, #24
 8002036:	189b      	adds	r3, r3, r2
 8002038:	19db      	adds	r3, r3, r7
 800203a:	2204      	movs	r2, #4
 800203c:	701a      	strb	r2, [r3, #0]
 800203e:	e08e      	b.n	800215e <UART_SetConfig+0x1fa>
 8002040:	231b      	movs	r3, #27
 8002042:	2218      	movs	r2, #24
 8002044:	189b      	adds	r3, r3, r2
 8002046:	19db      	adds	r3, r3, r7
 8002048:	2208      	movs	r2, #8
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e087      	b.n	800215e <UART_SetConfig+0x1fa>
 800204e:	231b      	movs	r3, #27
 8002050:	2218      	movs	r2, #24
 8002052:	189b      	adds	r3, r3, r2
 8002054:	19db      	adds	r3, r3, r7
 8002056:	2210      	movs	r2, #16
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	e080      	b.n	800215e <UART_SetConfig+0x1fa>
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a99      	ldr	r2, [pc, #612]	; (80022c8 <UART_SetConfig+0x364>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d131      	bne.n	80020ca <UART_SetConfig+0x166>
 8002066:	4b97      	ldr	r3, [pc, #604]	; (80022c4 <UART_SetConfig+0x360>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	220c      	movs	r2, #12
 800206c:	4013      	ands	r3, r2
 800206e:	2b0c      	cmp	r3, #12
 8002070:	d01d      	beq.n	80020ae <UART_SetConfig+0x14a>
 8002072:	d823      	bhi.n	80020bc <UART_SetConfig+0x158>
 8002074:	2b08      	cmp	r3, #8
 8002076:	d00c      	beq.n	8002092 <UART_SetConfig+0x12e>
 8002078:	d820      	bhi.n	80020bc <UART_SetConfig+0x158>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <UART_SetConfig+0x120>
 800207e:	2b04      	cmp	r3, #4
 8002080:	d00e      	beq.n	80020a0 <UART_SetConfig+0x13c>
 8002082:	e01b      	b.n	80020bc <UART_SetConfig+0x158>
 8002084:	231b      	movs	r3, #27
 8002086:	2218      	movs	r2, #24
 8002088:	189b      	adds	r3, r3, r2
 800208a:	19db      	adds	r3, r3, r7
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	e065      	b.n	800215e <UART_SetConfig+0x1fa>
 8002092:	231b      	movs	r3, #27
 8002094:	2218      	movs	r2, #24
 8002096:	189b      	adds	r3, r3, r2
 8002098:	19db      	adds	r3, r3, r7
 800209a:	2202      	movs	r2, #2
 800209c:	701a      	strb	r2, [r3, #0]
 800209e:	e05e      	b.n	800215e <UART_SetConfig+0x1fa>
 80020a0:	231b      	movs	r3, #27
 80020a2:	2218      	movs	r2, #24
 80020a4:	189b      	adds	r3, r3, r2
 80020a6:	19db      	adds	r3, r3, r7
 80020a8:	2204      	movs	r2, #4
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	e057      	b.n	800215e <UART_SetConfig+0x1fa>
 80020ae:	231b      	movs	r3, #27
 80020b0:	2218      	movs	r2, #24
 80020b2:	189b      	adds	r3, r3, r2
 80020b4:	19db      	adds	r3, r3, r7
 80020b6:	2208      	movs	r2, #8
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e050      	b.n	800215e <UART_SetConfig+0x1fa>
 80020bc:	231b      	movs	r3, #27
 80020be:	2218      	movs	r2, #24
 80020c0:	189b      	adds	r3, r3, r2
 80020c2:	19db      	adds	r3, r3, r7
 80020c4:	2210      	movs	r2, #16
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e049      	b.n	800215e <UART_SetConfig+0x1fa>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7a      	ldr	r2, [pc, #488]	; (80022b8 <UART_SetConfig+0x354>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d13e      	bne.n	8002152 <UART_SetConfig+0x1ee>
 80020d4:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <UART_SetConfig+0x360>)
 80020d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4013      	ands	r3, r2
 80020de:	22c0      	movs	r2, #192	; 0xc0
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d027      	beq.n	8002136 <UART_SetConfig+0x1d2>
 80020e6:	22c0      	movs	r2, #192	; 0xc0
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d82a      	bhi.n	8002144 <UART_SetConfig+0x1e0>
 80020ee:	2280      	movs	r2, #128	; 0x80
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d011      	beq.n	800211a <UART_SetConfig+0x1b6>
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d822      	bhi.n	8002144 <UART_SetConfig+0x1e0>
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d004      	beq.n	800210c <UART_SetConfig+0x1a8>
 8002102:	2280      	movs	r2, #128	; 0x80
 8002104:	00d2      	lsls	r2, r2, #3
 8002106:	4293      	cmp	r3, r2
 8002108:	d00e      	beq.n	8002128 <UART_SetConfig+0x1c4>
 800210a:	e01b      	b.n	8002144 <UART_SetConfig+0x1e0>
 800210c:	231b      	movs	r3, #27
 800210e:	2218      	movs	r2, #24
 8002110:	189b      	adds	r3, r3, r2
 8002112:	19db      	adds	r3, r3, r7
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e021      	b.n	800215e <UART_SetConfig+0x1fa>
 800211a:	231b      	movs	r3, #27
 800211c:	2218      	movs	r2, #24
 800211e:	189b      	adds	r3, r3, r2
 8002120:	19db      	adds	r3, r3, r7
 8002122:	2202      	movs	r2, #2
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e01a      	b.n	800215e <UART_SetConfig+0x1fa>
 8002128:	231b      	movs	r3, #27
 800212a:	2218      	movs	r2, #24
 800212c:	189b      	adds	r3, r3, r2
 800212e:	19db      	adds	r3, r3, r7
 8002130:	2204      	movs	r2, #4
 8002132:	701a      	strb	r2, [r3, #0]
 8002134:	e013      	b.n	800215e <UART_SetConfig+0x1fa>
 8002136:	231b      	movs	r3, #27
 8002138:	2218      	movs	r2, #24
 800213a:	189b      	adds	r3, r3, r2
 800213c:	19db      	adds	r3, r3, r7
 800213e:	2208      	movs	r2, #8
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e00c      	b.n	800215e <UART_SetConfig+0x1fa>
 8002144:	231b      	movs	r3, #27
 8002146:	2218      	movs	r2, #24
 8002148:	189b      	adds	r3, r3, r2
 800214a:	19db      	adds	r3, r3, r7
 800214c:	2210      	movs	r2, #16
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	e005      	b.n	800215e <UART_SetConfig+0x1fa>
 8002152:	231b      	movs	r3, #27
 8002154:	2218      	movs	r2, #24
 8002156:	189b      	adds	r3, r3, r2
 8002158:	19db      	adds	r3, r3, r7
 800215a:	2210      	movs	r2, #16
 800215c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a55      	ldr	r2, [pc, #340]	; (80022b8 <UART_SetConfig+0x354>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d000      	beq.n	800216a <UART_SetConfig+0x206>
 8002168:	e084      	b.n	8002274 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800216a:	231b      	movs	r3, #27
 800216c:	2218      	movs	r2, #24
 800216e:	189b      	adds	r3, r3, r2
 8002170:	19db      	adds	r3, r3, r7
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b08      	cmp	r3, #8
 8002176:	d01d      	beq.n	80021b4 <UART_SetConfig+0x250>
 8002178:	dc20      	bgt.n	80021bc <UART_SetConfig+0x258>
 800217a:	2b04      	cmp	r3, #4
 800217c:	d015      	beq.n	80021aa <UART_SetConfig+0x246>
 800217e:	dc1d      	bgt.n	80021bc <UART_SetConfig+0x258>
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <UART_SetConfig+0x226>
 8002184:	2b02      	cmp	r3, #2
 8002186:	d005      	beq.n	8002194 <UART_SetConfig+0x230>
 8002188:	e018      	b.n	80021bc <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800218a:	f7ff fd07 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 800218e:	0003      	movs	r3, r0
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002192:	e01c      	b.n	80021ce <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002194:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <UART_SetConfig+0x360>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2210      	movs	r2, #16
 800219a:	4013      	ands	r3, r2
 800219c:	d002      	beq.n	80021a4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800219e:	4b4b      	ldr	r3, [pc, #300]	; (80022cc <UART_SetConfig+0x368>)
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80021a2:	e014      	b.n	80021ce <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80021a4:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <UART_SetConfig+0x36c>)
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021a8:	e011      	b.n	80021ce <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021aa:	f7ff fc47 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80021ae:	0003      	movs	r3, r0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021b2:	e00c      	b.n	80021ce <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80021ba:	e008      	b.n	80021ce <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80021c0:	231a      	movs	r3, #26
 80021c2:	2218      	movs	r2, #24
 80021c4:	189b      	adds	r3, r3, r2
 80021c6:	19db      	adds	r3, r3, r7
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
        break;
 80021cc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d100      	bne.n	80021d6 <UART_SetConfig+0x272>
 80021d4:	e133      	b.n	800243e <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	0013      	movs	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	189b      	adds	r3, r3, r2
 80021e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d305      	bcc.n	80021f2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80021ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d906      	bls.n	8002200 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80021f2:	231a      	movs	r3, #26
 80021f4:	2218      	movs	r2, #24
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	19db      	adds	r3, r3, r7
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
 80021fe:	e11e      	b.n	800243e <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	6939      	ldr	r1, [r7, #16]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	000b      	movs	r3, r1
 800220e:	0e1b      	lsrs	r3, r3, #24
 8002210:	0010      	movs	r0, r2
 8002212:	0205      	lsls	r5, r0, #8
 8002214:	431d      	orrs	r5, r3
 8002216:	000b      	movs	r3, r1
 8002218:	021c      	lsls	r4, r3, #8
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68b8      	ldr	r0, [r7, #8]
 8002228:	68f9      	ldr	r1, [r7, #12]
 800222a:	1900      	adds	r0, r0, r4
 800222c:	4169      	adcs	r1, r5
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f7fd fff0 	bl	8000220 <__aeabi_uldivmod>
 8002240:	0002      	movs	r2, r0
 8002242:	000b      	movs	r3, r1
 8002244:	0013      	movs	r3, r2
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800224a:	23c0      	movs	r3, #192	; 0xc0
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	429a      	cmp	r2, r3
 8002250:	d309      	bcc.n	8002266 <UART_SetConfig+0x302>
 8002252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	035b      	lsls	r3, r3, #13
 8002258:	429a      	cmp	r2, r3
 800225a:	d204      	bcs.n	8002266 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	e0eb      	b.n	800243e <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8002266:	231a      	movs	r3, #26
 8002268:	2218      	movs	r2, #24
 800226a:	189b      	adds	r3, r3, r2
 800226c:	19db      	adds	r3, r3, r7
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e0e4      	b.n	800243e <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	69da      	ldr	r2, [r3, #28]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	021b      	lsls	r3, r3, #8
 800227c:	429a      	cmp	r2, r3
 800227e:	d000      	beq.n	8002282 <UART_SetConfig+0x31e>
 8002280:	e086      	b.n	8002390 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8002282:	231b      	movs	r3, #27
 8002284:	2218      	movs	r2, #24
 8002286:	189b      	adds	r3, r3, r2
 8002288:	19db      	adds	r3, r3, r7
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d837      	bhi.n	8002300 <UART_SetConfig+0x39c>
 8002290:	009a      	lsls	r2, r3, #2
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <UART_SetConfig+0x370>)
 8002294:	18d3      	adds	r3, r2, r3
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800229a:	f7ff fc7f 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 800229e:	0003      	movs	r3, r0
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022a2:	e036      	b.n	8002312 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022a4:	f7ff fc90 	bl	8001bc8 <HAL_RCC_GetPCLK2Freq>
 80022a8:	0003      	movs	r3, r0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022ac:	e031      	b.n	8002312 <UART_SetConfig+0x3ae>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	efff69f3 	.word	0xefff69f3
 80022b4:	ffffcfff 	.word	0xffffcfff
 80022b8:	40004800 	.word	0x40004800
 80022bc:	fffff4ff 	.word	0xfffff4ff
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40004400 	.word	0x40004400
 80022cc:	003d0900 	.word	0x003d0900
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	08002a40 	.word	0x08002a40
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022d8:	4b60      	ldr	r3, [pc, #384]	; (800245c <UART_SetConfig+0x4f8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2210      	movs	r2, #16
 80022de:	4013      	ands	r3, r2
 80022e0:	d002      	beq.n	80022e8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022e2:	4b5f      	ldr	r3, [pc, #380]	; (8002460 <UART_SetConfig+0x4fc>)
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022e6:	e014      	b.n	8002312 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80022e8:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <UART_SetConfig+0x500>)
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022ec:	e011      	b.n	8002312 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022ee:	f7ff fba5 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80022f2:	0003      	movs	r3, r0
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022f6:	e00c      	b.n	8002312 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80022fe:	e008      	b.n	8002312 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002304:	231a      	movs	r3, #26
 8002306:	2218      	movs	r2, #24
 8002308:	189b      	adds	r3, r3, r2
 800230a:	19db      	adds	r3, r3, r7
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
        break;
 8002310:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d100      	bne.n	800231a <UART_SetConfig+0x3b6>
 8002318:	e091      	b.n	800243e <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	005a      	lsls	r2, r3, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	18d2      	adds	r2, r2, r3
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0019      	movs	r1, r3
 800232c:	0010      	movs	r0, r2
 800232e:	f7fd feeb 	bl	8000108 <__udivsi3>
 8002332:	0003      	movs	r3, r0
 8002334:	b29b      	uxth	r3, r3
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	2b0f      	cmp	r3, #15
 800233c:	d921      	bls.n	8002382 <UART_SetConfig+0x41e>
 800233e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	025b      	lsls	r3, r3, #9
 8002344:	429a      	cmp	r2, r3
 8002346:	d21c      	bcs.n	8002382 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234a:	b29a      	uxth	r2, r3
 800234c:	200e      	movs	r0, #14
 800234e:	2418      	movs	r4, #24
 8002350:	1903      	adds	r3, r0, r4
 8002352:	19db      	adds	r3, r3, r7
 8002354:	210f      	movs	r1, #15
 8002356:	438a      	bics	r2, r1
 8002358:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	b29b      	uxth	r3, r3
 8002360:	2207      	movs	r2, #7
 8002362:	4013      	ands	r3, r2
 8002364:	b299      	uxth	r1, r3
 8002366:	1903      	adds	r3, r0, r4
 8002368:	19db      	adds	r3, r3, r7
 800236a:	1902      	adds	r2, r0, r4
 800236c:	19d2      	adds	r2, r2, r7
 800236e:	8812      	ldrh	r2, [r2, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1902      	adds	r2, r0, r4
 800237a:	19d2      	adds	r2, r2, r7
 800237c:	8812      	ldrh	r2, [r2, #0]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	e05d      	b.n	800243e <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8002382:	231a      	movs	r3, #26
 8002384:	2218      	movs	r2, #24
 8002386:	189b      	adds	r3, r3, r2
 8002388:	19db      	adds	r3, r3, r7
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
 800238e:	e056      	b.n	800243e <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002390:	231b      	movs	r3, #27
 8002392:	2218      	movs	r2, #24
 8002394:	189b      	adds	r3, r3, r2
 8002396:	19db      	adds	r3, r3, r7
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b08      	cmp	r3, #8
 800239c:	d822      	bhi.n	80023e4 <UART_SetConfig+0x480>
 800239e:	009a      	lsls	r2, r3, #2
 80023a0:	4b31      	ldr	r3, [pc, #196]	; (8002468 <UART_SetConfig+0x504>)
 80023a2:	18d3      	adds	r3, r2, r3
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023a8:	f7ff fbf8 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 80023ac:	0003      	movs	r3, r0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023b0:	e021      	b.n	80023f6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023b2:	f7ff fc09 	bl	8001bc8 <HAL_RCC_GetPCLK2Freq>
 80023b6:	0003      	movs	r3, r0
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023ba:	e01c      	b.n	80023f6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <UART_SetConfig+0x4f8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2210      	movs	r2, #16
 80023c2:	4013      	ands	r3, r2
 80023c4:	d002      	beq.n	80023cc <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <UART_SetConfig+0x4fc>)
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80023ca:	e014      	b.n	80023f6 <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <UART_SetConfig+0x500>)
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023d0:	e011      	b.n	80023f6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023d2:	f7ff fb33 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80023d6:	0003      	movs	r3, r0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023da:	e00c      	b.n	80023f6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80023e2:	e008      	b.n	80023f6 <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80023e8:	231a      	movs	r3, #26
 80023ea:	2218      	movs	r2, #24
 80023ec:	189b      	adds	r3, r3, r2
 80023ee:	19db      	adds	r3, r3, r7
 80023f0:	2201      	movs	r2, #1
 80023f2:	701a      	strb	r2, [r3, #0]
        break;
 80023f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80023f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d020      	beq.n	800243e <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	085a      	lsrs	r2, r3, #1
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	18d2      	adds	r2, r2, r3
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	0019      	movs	r1, r3
 800240c:	0010      	movs	r0, r2
 800240e:	f7fd fe7b 	bl	8000108 <__udivsi3>
 8002412:	0003      	movs	r3, r0
 8002414:	b29b      	uxth	r3, r3
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	2b0f      	cmp	r3, #15
 800241c:	d909      	bls.n	8002432 <UART_SetConfig+0x4ce>
 800241e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	025b      	lsls	r3, r3, #9
 8002424:	429a      	cmp	r2, r3
 8002426:	d204      	bcs.n	8002432 <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	e005      	b.n	800243e <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8002432:	231a      	movs	r3, #26
 8002434:	2218      	movs	r2, #24
 8002436:	189b      	adds	r3, r3, r2
 8002438:	19db      	adds	r3, r3, r7
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	2200      	movs	r2, #0
 8002442:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2200      	movs	r2, #0
 8002448:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800244a:	231a      	movs	r3, #26
 800244c:	2218      	movs	r2, #24
 800244e:	189b      	adds	r3, r3, r2
 8002450:	19db      	adds	r3, r3, r7
 8002452:	781b      	ldrb	r3, [r3, #0]
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b00e      	add	sp, #56	; 0x38
 800245a:	bdb0      	pop	{r4, r5, r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	003d0900 	.word	0x003d0900
 8002464:	00f42400 	.word	0x00f42400
 8002468:	08002a64 	.word	0x08002a64

0800246c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	2201      	movs	r2, #1
 800247a:	4013      	ands	r3, r2
 800247c:	d00b      	beq.n	8002496 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <UART_AdvFeatureConfig+0x144>)
 8002486:	4013      	ands	r3, r2
 8002488:	0019      	movs	r1, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2202      	movs	r2, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d00b      	beq.n	80024b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <UART_AdvFeatureConfig+0x148>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2204      	movs	r2, #4
 80024be:	4013      	ands	r3, r2
 80024c0:	d00b      	beq.n	80024da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a3b      	ldr	r2, [pc, #236]	; (80025b8 <UART_AdvFeatureConfig+0x14c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2208      	movs	r2, #8
 80024e0:	4013      	ands	r3, r2
 80024e2:	d00b      	beq.n	80024fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4a34      	ldr	r2, [pc, #208]	; (80025bc <UART_AdvFeatureConfig+0x150>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	2210      	movs	r2, #16
 8002502:	4013      	ands	r3, r2
 8002504:	d00b      	beq.n	800251e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a2c      	ldr	r2, [pc, #176]	; (80025c0 <UART_AdvFeatureConfig+0x154>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	2220      	movs	r2, #32
 8002524:	4013      	ands	r3, r2
 8002526:	d00b      	beq.n	8002540 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4a25      	ldr	r2, [pc, #148]	; (80025c4 <UART_AdvFeatureConfig+0x158>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	4013      	ands	r3, r2
 8002548:	d01d      	beq.n	8002586 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <UART_AdvFeatureConfig+0x15c>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	035b      	lsls	r3, r3, #13
 800256a:	429a      	cmp	r2, r3
 800256c:	d10b      	bne.n	8002586 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a15      	ldr	r2, [pc, #84]	; (80025cc <UART_AdvFeatureConfig+0x160>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	4013      	ands	r3, r2
 800258e:	d00b      	beq.n	80025a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <UART_AdvFeatureConfig+0x164>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
  }
}
 80025a8:	46c0      	nop			; (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b002      	add	sp, #8
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	fffdffff 	.word	0xfffdffff
 80025b4:	fffeffff 	.word	0xfffeffff
 80025b8:	fffbffff 	.word	0xfffbffff
 80025bc:	ffff7fff 	.word	0xffff7fff
 80025c0:	ffffefff 	.word	0xffffefff
 80025c4:	ffffdfff 	.word	0xffffdfff
 80025c8:	ffefffff 	.word	0xffefffff
 80025cc:	ff9fffff 	.word	0xff9fffff
 80025d0:	fff7ffff 	.word	0xfff7ffff

080025d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	2100      	movs	r1, #0
 80025e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025e4:	f7fe fab2 	bl	8000b4c <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2208      	movs	r2, #8
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d10c      	bne.n	8002614 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	0391      	lsls	r1, r2, #14
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4a17      	ldr	r2, [pc, #92]	; (8002660 <UART_CheckIdleState+0x8c>)
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	f000 f82c 	bl	8002664 <UART_WaitOnFlagUntilTimeout>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d001      	beq.n	8002614 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e021      	b.n	8002658 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2204      	movs	r2, #4
 800261c:	4013      	ands	r3, r2
 800261e:	2b04      	cmp	r3, #4
 8002620:	d10c      	bne.n	800263c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	03d1      	lsls	r1, r2, #15
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <UART_CheckIdleState+0x8c>)
 800262c:	9200      	str	r2, [sp, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	f000 f818 	bl	8002664 <UART_WaitOnFlagUntilTimeout>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d001      	beq.n	800263c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e00d      	b.n	8002658 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2274      	movs	r2, #116	; 0x74
 8002652:	2100      	movs	r1, #0
 8002654:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b004      	add	sp, #16
 800265e:	bd80      	pop	{r7, pc}
 8002660:	01ffffff 	.word	0x01ffffff

08002664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b094      	sub	sp, #80	; 0x50
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	1dfb      	adds	r3, r7, #7
 8002672:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002674:	e0a3      	b.n	80027be <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002678:	3301      	adds	r3, #1
 800267a:	d100      	bne.n	800267e <UART_WaitOnFlagUntilTimeout+0x1a>
 800267c:	e09f      	b.n	80027be <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267e:	f7fe fa65 	bl	8000b4c <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800268a:	429a      	cmp	r2, r3
 800268c:	d302      	bcc.n	8002694 <UART_WaitOnFlagUntilTimeout+0x30>
 800268e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002690:	2b00      	cmp	r3, #0
 8002692:	d13d      	bne.n	8002710 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002694:	f3ef 8310 	mrs	r3, PRIMASK
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800269c:	647b      	str	r3, [r7, #68]	; 0x44
 800269e:	2301      	movs	r3, #1
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	f383 8810 	msr	PRIMASK, r3
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	494c      	ldr	r1, [pc, #304]	; (80027e8 <UART_WaitOnFlagUntilTimeout+0x184>)
 80026b6:	400a      	ands	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	f383 8810 	msr	PRIMASK, r3
}
 80026c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ce:	643b      	str	r3, [r7, #64]	; 0x40
 80026d0:	2301      	movs	r3, #1
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	f383 8810 	msr	PRIMASK, r3
}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2101      	movs	r1, #1
 80026e8:	438a      	bics	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f2:	f383 8810 	msr	PRIMASK, r3
}
 80026f6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2220      	movs	r2, #32
 80026fc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2274      	movs	r2, #116	; 0x74
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e067      	b.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2204      	movs	r2, #4
 8002718:	4013      	ands	r3, r2
 800271a:	d050      	beq.n	80027be <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	401a      	ands	r2, r3
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	429a      	cmp	r2, r3
 800272e:	d146      	bne.n	80027be <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273a:	f3ef 8310 	mrs	r3, PRIMASK
 800273e:	613b      	str	r3, [r7, #16]
  return(result);
 8002740:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002744:	2301      	movs	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f383 8810 	msr	PRIMASK, r3
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4923      	ldr	r1, [pc, #140]	; (80027e8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800275c:	400a      	ands	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002762:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f383 8810 	msr	PRIMASK, r3
}
 800276a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800276c:	f3ef 8310 	mrs	r3, PRIMASK
 8002770:	61fb      	str	r3, [r7, #28]
  return(result);
 8002772:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002774:	64bb      	str	r3, [r7, #72]	; 0x48
 8002776:	2301      	movs	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f383 8810 	msr	PRIMASK, r3
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	438a      	bics	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f383 8810 	msr	PRIMASK, r3
}
 800279c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2220      	movs	r2, #32
 80027a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	2120      	movs	r1, #32
 80027b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2274      	movs	r2, #116	; 0x74
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e010      	b.n	80027e0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	425a      	negs	r2, r3
 80027ce:	4153      	adcs	r3, r2
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	001a      	movs	r2, r3
 80027d4:	1dfb      	adds	r3, r7, #7
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d100      	bne.n	80027de <UART_WaitOnFlagUntilTimeout+0x17a>
 80027dc:	e74b      	b.n	8002676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b014      	add	sp, #80	; 0x50
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	fffffe5f 	.word	0xfffffe5f

080027ec <__errno>:
 80027ec:	4b01      	ldr	r3, [pc, #4]	; (80027f4 <__errno+0x8>)
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	4770      	bx	lr
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	2000000c 	.word	0x2000000c

080027f8 <__libc_init_array>:
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	2600      	movs	r6, #0
 80027fc:	4d0c      	ldr	r5, [pc, #48]	; (8002830 <__libc_init_array+0x38>)
 80027fe:	4c0d      	ldr	r4, [pc, #52]	; (8002834 <__libc_init_array+0x3c>)
 8002800:	1b64      	subs	r4, r4, r5
 8002802:	10a4      	asrs	r4, r4, #2
 8002804:	42a6      	cmp	r6, r4
 8002806:	d109      	bne.n	800281c <__libc_init_array+0x24>
 8002808:	2600      	movs	r6, #0
 800280a:	f000 f8e7 	bl	80029dc <_init>
 800280e:	4d0a      	ldr	r5, [pc, #40]	; (8002838 <__libc_init_array+0x40>)
 8002810:	4c0a      	ldr	r4, [pc, #40]	; (800283c <__libc_init_array+0x44>)
 8002812:	1b64      	subs	r4, r4, r5
 8002814:	10a4      	asrs	r4, r4, #2
 8002816:	42a6      	cmp	r6, r4
 8002818:	d105      	bne.n	8002826 <__libc_init_array+0x2e>
 800281a:	bd70      	pop	{r4, r5, r6, pc}
 800281c:	00b3      	lsls	r3, r6, #2
 800281e:	58eb      	ldr	r3, [r5, r3]
 8002820:	4798      	blx	r3
 8002822:	3601      	adds	r6, #1
 8002824:	e7ee      	b.n	8002804 <__libc_init_array+0xc>
 8002826:	00b3      	lsls	r3, r6, #2
 8002828:	58eb      	ldr	r3, [r5, r3]
 800282a:	4798      	blx	r3
 800282c:	3601      	adds	r6, #1
 800282e:	e7f2      	b.n	8002816 <__libc_init_array+0x1e>
 8002830:	08002a90 	.word	0x08002a90
 8002834:	08002a90 	.word	0x08002a90
 8002838:	08002a90 	.word	0x08002a90
 800283c:	08002a94 	.word	0x08002a94

08002840 <malloc>:
 8002840:	b510      	push	{r4, lr}
 8002842:	4b03      	ldr	r3, [pc, #12]	; (8002850 <malloc+0x10>)
 8002844:	0001      	movs	r1, r0
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	f000 f82e 	bl	80028a8 <_malloc_r>
 800284c:	bd10      	pop	{r4, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	2000000c 	.word	0x2000000c

08002854 <memset>:
 8002854:	0003      	movs	r3, r0
 8002856:	1882      	adds	r2, r0, r2
 8002858:	4293      	cmp	r3, r2
 800285a:	d100      	bne.n	800285e <memset+0xa>
 800285c:	4770      	bx	lr
 800285e:	7019      	strb	r1, [r3, #0]
 8002860:	3301      	adds	r3, #1
 8002862:	e7f9      	b.n	8002858 <memset+0x4>

08002864 <sbrk_aligned>:
 8002864:	b570      	push	{r4, r5, r6, lr}
 8002866:	4e0f      	ldr	r6, [pc, #60]	; (80028a4 <sbrk_aligned+0x40>)
 8002868:	000d      	movs	r5, r1
 800286a:	6831      	ldr	r1, [r6, #0]
 800286c:	0004      	movs	r4, r0
 800286e:	2900      	cmp	r1, #0
 8002870:	d102      	bne.n	8002878 <sbrk_aligned+0x14>
 8002872:	f000 f88f 	bl	8002994 <_sbrk_r>
 8002876:	6030      	str	r0, [r6, #0]
 8002878:	0029      	movs	r1, r5
 800287a:	0020      	movs	r0, r4
 800287c:	f000 f88a 	bl	8002994 <_sbrk_r>
 8002880:	1c43      	adds	r3, r0, #1
 8002882:	d00a      	beq.n	800289a <sbrk_aligned+0x36>
 8002884:	2303      	movs	r3, #3
 8002886:	1cc5      	adds	r5, r0, #3
 8002888:	439d      	bics	r5, r3
 800288a:	42a8      	cmp	r0, r5
 800288c:	d007      	beq.n	800289e <sbrk_aligned+0x3a>
 800288e:	1a29      	subs	r1, r5, r0
 8002890:	0020      	movs	r0, r4
 8002892:	f000 f87f 	bl	8002994 <_sbrk_r>
 8002896:	1c43      	adds	r3, r0, #1
 8002898:	d101      	bne.n	800289e <sbrk_aligned+0x3a>
 800289a:	2501      	movs	r5, #1
 800289c:	426d      	negs	r5, r5
 800289e:	0028      	movs	r0, r5
 80028a0:	bd70      	pop	{r4, r5, r6, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	2000011c 	.word	0x2000011c

080028a8 <_malloc_r>:
 80028a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028aa:	2203      	movs	r2, #3
 80028ac:	1ccb      	adds	r3, r1, #3
 80028ae:	4393      	bics	r3, r2
 80028b0:	3308      	adds	r3, #8
 80028b2:	0006      	movs	r6, r0
 80028b4:	001f      	movs	r7, r3
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d232      	bcs.n	8002920 <_malloc_r+0x78>
 80028ba:	270c      	movs	r7, #12
 80028bc:	42b9      	cmp	r1, r7
 80028be:	d831      	bhi.n	8002924 <_malloc_r+0x7c>
 80028c0:	0030      	movs	r0, r6
 80028c2:	f000 f879 	bl	80029b8 <__malloc_lock>
 80028c6:	4d32      	ldr	r5, [pc, #200]	; (8002990 <_malloc_r+0xe8>)
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	001c      	movs	r4, r3
 80028cc:	2c00      	cmp	r4, #0
 80028ce:	d12e      	bne.n	800292e <_malloc_r+0x86>
 80028d0:	0039      	movs	r1, r7
 80028d2:	0030      	movs	r0, r6
 80028d4:	f7ff ffc6 	bl	8002864 <sbrk_aligned>
 80028d8:	0004      	movs	r4, r0
 80028da:	1c43      	adds	r3, r0, #1
 80028dc:	d11e      	bne.n	800291c <_malloc_r+0x74>
 80028de:	682c      	ldr	r4, [r5, #0]
 80028e0:	0025      	movs	r5, r4
 80028e2:	2d00      	cmp	r5, #0
 80028e4:	d14a      	bne.n	800297c <_malloc_r+0xd4>
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	0029      	movs	r1, r5
 80028ea:	18e3      	adds	r3, r4, r3
 80028ec:	0030      	movs	r0, r6
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	f000 f850 	bl	8002994 <_sbrk_r>
 80028f4:	9b01      	ldr	r3, [sp, #4]
 80028f6:	4283      	cmp	r3, r0
 80028f8:	d143      	bne.n	8002982 <_malloc_r+0xda>
 80028fa:	6823      	ldr	r3, [r4, #0]
 80028fc:	3703      	adds	r7, #3
 80028fe:	1aff      	subs	r7, r7, r3
 8002900:	2303      	movs	r3, #3
 8002902:	439f      	bics	r7, r3
 8002904:	3708      	adds	r7, #8
 8002906:	2f0c      	cmp	r7, #12
 8002908:	d200      	bcs.n	800290c <_malloc_r+0x64>
 800290a:	270c      	movs	r7, #12
 800290c:	0039      	movs	r1, r7
 800290e:	0030      	movs	r0, r6
 8002910:	f7ff ffa8 	bl	8002864 <sbrk_aligned>
 8002914:	1c43      	adds	r3, r0, #1
 8002916:	d034      	beq.n	8002982 <_malloc_r+0xda>
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	19df      	adds	r7, r3, r7
 800291c:	6027      	str	r7, [r4, #0]
 800291e:	e013      	b.n	8002948 <_malloc_r+0xa0>
 8002920:	2b00      	cmp	r3, #0
 8002922:	dacb      	bge.n	80028bc <_malloc_r+0x14>
 8002924:	230c      	movs	r3, #12
 8002926:	2500      	movs	r5, #0
 8002928:	6033      	str	r3, [r6, #0]
 800292a:	0028      	movs	r0, r5
 800292c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	1bd1      	subs	r1, r2, r7
 8002932:	d420      	bmi.n	8002976 <_malloc_r+0xce>
 8002934:	290b      	cmp	r1, #11
 8002936:	d917      	bls.n	8002968 <_malloc_r+0xc0>
 8002938:	19e2      	adds	r2, r4, r7
 800293a:	6027      	str	r7, [r4, #0]
 800293c:	42a3      	cmp	r3, r4
 800293e:	d111      	bne.n	8002964 <_malloc_r+0xbc>
 8002940:	602a      	str	r2, [r5, #0]
 8002942:	6863      	ldr	r3, [r4, #4]
 8002944:	6011      	str	r1, [r2, #0]
 8002946:	6053      	str	r3, [r2, #4]
 8002948:	0030      	movs	r0, r6
 800294a:	0025      	movs	r5, r4
 800294c:	f000 f83c 	bl	80029c8 <__malloc_unlock>
 8002950:	2207      	movs	r2, #7
 8002952:	350b      	adds	r5, #11
 8002954:	1d23      	adds	r3, r4, #4
 8002956:	4395      	bics	r5, r2
 8002958:	1aea      	subs	r2, r5, r3
 800295a:	429d      	cmp	r5, r3
 800295c:	d0e5      	beq.n	800292a <_malloc_r+0x82>
 800295e:	1b5b      	subs	r3, r3, r5
 8002960:	50a3      	str	r3, [r4, r2]
 8002962:	e7e2      	b.n	800292a <_malloc_r+0x82>
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	e7ec      	b.n	8002942 <_malloc_r+0x9a>
 8002968:	6862      	ldr	r2, [r4, #4]
 800296a:	42a3      	cmp	r3, r4
 800296c:	d101      	bne.n	8002972 <_malloc_r+0xca>
 800296e:	602a      	str	r2, [r5, #0]
 8002970:	e7ea      	b.n	8002948 <_malloc_r+0xa0>
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	e7e8      	b.n	8002948 <_malloc_r+0xa0>
 8002976:	0023      	movs	r3, r4
 8002978:	6864      	ldr	r4, [r4, #4]
 800297a:	e7a7      	b.n	80028cc <_malloc_r+0x24>
 800297c:	002c      	movs	r4, r5
 800297e:	686d      	ldr	r5, [r5, #4]
 8002980:	e7af      	b.n	80028e2 <_malloc_r+0x3a>
 8002982:	230c      	movs	r3, #12
 8002984:	0030      	movs	r0, r6
 8002986:	6033      	str	r3, [r6, #0]
 8002988:	f000 f81e 	bl	80029c8 <__malloc_unlock>
 800298c:	e7cd      	b.n	800292a <_malloc_r+0x82>
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	20000118 	.word	0x20000118

08002994 <_sbrk_r>:
 8002994:	2300      	movs	r3, #0
 8002996:	b570      	push	{r4, r5, r6, lr}
 8002998:	4d06      	ldr	r5, [pc, #24]	; (80029b4 <_sbrk_r+0x20>)
 800299a:	0004      	movs	r4, r0
 800299c:	0008      	movs	r0, r1
 800299e:	602b      	str	r3, [r5, #0]
 80029a0:	f7fe f808 	bl	80009b4 <_sbrk>
 80029a4:	1c43      	adds	r3, r0, #1
 80029a6:	d103      	bne.n	80029b0 <_sbrk_r+0x1c>
 80029a8:	682b      	ldr	r3, [r5, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d000      	beq.n	80029b0 <_sbrk_r+0x1c>
 80029ae:	6023      	str	r3, [r4, #0]
 80029b0:	bd70      	pop	{r4, r5, r6, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	20000120 	.word	0x20000120

080029b8 <__malloc_lock>:
 80029b8:	b510      	push	{r4, lr}
 80029ba:	4802      	ldr	r0, [pc, #8]	; (80029c4 <__malloc_lock+0xc>)
 80029bc:	f000 f80c 	bl	80029d8 <__retarget_lock_acquire_recursive>
 80029c0:	bd10      	pop	{r4, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	20000124 	.word	0x20000124

080029c8 <__malloc_unlock>:
 80029c8:	b510      	push	{r4, lr}
 80029ca:	4802      	ldr	r0, [pc, #8]	; (80029d4 <__malloc_unlock+0xc>)
 80029cc:	f000 f805 	bl	80029da <__retarget_lock_release_recursive>
 80029d0:	bd10      	pop	{r4, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	20000124 	.word	0x20000124

080029d8 <__retarget_lock_acquire_recursive>:
 80029d8:	4770      	bx	lr

080029da <__retarget_lock_release_recursive>:
 80029da:	4770      	bx	lr

080029dc <_init>:
 80029dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e2:	bc08      	pop	{r3}
 80029e4:	469e      	mov	lr, r3
 80029e6:	4770      	bx	lr

080029e8 <_fini>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ee:	bc08      	pop	{r3}
 80029f0:	469e      	mov	lr, r3
 80029f2:	4770      	bx	lr
